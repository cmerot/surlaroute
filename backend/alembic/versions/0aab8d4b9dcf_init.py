"""init

Revision ID: 0aab8d4b9dcf
Revises:
Create Date: 2024-11-27 13:59:47.597639

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlalchemy_utils
import geoalchemy2

# revision identifiers, used by Alembic.
revision: str = '0aab8d4b9dcf'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('activity',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('path', sqlalchemy_utils.types.ltree.LtreeType(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('schema', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('path')
    )
    op.create_table('addressgeo',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('street', sa.String(), nullable=True),
    sa.Column('postal_code', sa.String(), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('country', sa.String(), nullable=True),
    sa.Column('administrative_area_1', sa.String(), nullable=True),
    sa.Column('administrative_area_2', sa.String(), nullable=True),
    sa.Column('administrative_area_3', sa.String(), nullable=True),
    sa.Column('geo_location', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('geo_shape', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    # op.create_index('idx_addressgeo_geo_location', 'addressgeo', ['geo_location'], unique=False, postgresql_using='gist')
    # op.create_index('idx_addressgeo_geo_shape', 'addressgeo', ['geo_shape'], unique=False, postgresql_using='gist')
    op.create_table('user',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('is_member', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('person_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['person_id'], ['person.id'], use_alter=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('contact',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('email_address', sa.String(), nullable=True),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('website', sa.String(), nullable=True),
    sa.Column('address_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['address_id'], ['addressgeo.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('actor',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('contact_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('org',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=True),
    sa.Column('group_owner_id', sa.Uuid(), nullable=True),
    sa.Column('group_read', sa.Boolean(), nullable=False),
    sa.Column('group_write', sa.Boolean(), nullable=False),
    sa.Column('member_read', sa.Boolean(), nullable=False),
    sa.Column('member_write', sa.Boolean(), nullable=False),
    sa.Column('other_read', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['group_owner_id'], ['org.id'], ),
    sa.ForeignKeyConstraint(['id'], ['actor.id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('associationorgactivity',
    sa.Column('org_id', sa.Uuid(), nullable=False),
    sa.Column('activity_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['activity_id'], ['activity.id'], ),
    sa.ForeignKeyConstraint(['org_id'], ['org.id'], ),
    sa.PrimaryKeyConstraint('org_id', 'activity_id')
    )
    op.create_table('associationorgactor',
    sa.Column('org_id', sa.Uuid(), nullable=False),
    sa.Column('actor_id', sa.Uuid(), nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['actor_id'], ['actor.id'], ),
    sa.ForeignKeyConstraint(['org_id'], ['org.id'], ),
    sa.PrimaryKeyConstraint('org_id', 'actor_id')
    )
    op.create_table('person',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('firstname', sa.String(), nullable=False),
    sa.Column('lastname', sa.String(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=True),
    sa.Column('group_owner_id', sa.Uuid(), nullable=True),
    sa.Column('group_read', sa.Boolean(), nullable=False),
    sa.Column('group_write', sa.Boolean(), nullable=False),
    sa.Column('member_read', sa.Boolean(), nullable=False),
    sa.Column('member_write', sa.Boolean(), nullable=False),
    sa.Column('other_read', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['group_owner_id'], ['org.id'], ),
    sa.ForeignKeyConstraint(['id'], ['actor.id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tour',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=True),
    sa.Column('group_owner_id', sa.Uuid(), nullable=True),
    sa.Column('group_read', sa.Boolean(), nullable=False),
    sa.Column('group_write', sa.Boolean(), nullable=False),
    sa.Column('member_read', sa.Boolean(), nullable=False),
    sa.Column('member_write', sa.Boolean(), nullable=False),
    sa.Column('other_read', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['group_owner_id'], ['org.id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('associationtouractor',
    sa.Column('tour_id', sa.Uuid(), nullable=False),
    sa.Column('actor_id', sa.Uuid(), nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['actor_id'], ['actor.id'], ),
    sa.ForeignKeyConstraint(['tour_id'], ['tour.id'], ),
    sa.PrimaryKeyConstraint('tour_id', 'actor_id')
    )
    op.create_table('event',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('tour_id', sa.Uuid(), nullable=False),
    sa.Column('start_dt', sa.DateTime(), nullable=True),
    sa.Column('end_dt', sa.DateTime(), nullable=True),
    sa.Column('event_venue_id', sa.Uuid(), nullable=True),
    sa.Column('owner_id', sa.Uuid(), nullable=True),
    sa.Column('group_owner_id', sa.Uuid(), nullable=True),
    sa.Column('group_read', sa.Boolean(), nullable=False),
    sa.Column('group_write', sa.Boolean(), nullable=False),
    sa.Column('member_read', sa.Boolean(), nullable=False),
    sa.Column('member_write', sa.Boolean(), nullable=False),
    sa.Column('other_read', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['event_venue_id'], ['org.id'], ),
    sa.ForeignKeyConstraint(['group_owner_id'], ['org.id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['tour_id'], ['tour.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('associationeventactor',
    sa.Column('event_id', sa.Uuid(), nullable=False),
    sa.Column('actor_id', sa.Uuid(), nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['actor_id'], ['actor.id'], ),
    sa.ForeignKeyConstraint(['event_id'], ['event.id'], ),
    sa.PrimaryKeyConstraint('event_id', 'actor_id')
    )
    op.create_foreign_key(None, 'user', 'person', ['person_id'], ['id'], use_alter=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('associationeventactor')
    op.drop_table('event')
    op.drop_table('associationtouractor')
    op.drop_table('tour')
    op.drop_table('person')
    op.drop_table('associationorgactor')
    op.drop_table('associationorgactivity')
    op.drop_table('org')
    op.drop_table('actor')
    op.drop_table('contact')
    op.drop_table('user')
    op.drop_index('idx_addressgeo_geo_shape', table_name='addressgeo', postgresql_using='gist')
    op.drop_index('idx_addressgeo_geo_location', table_name='addressgeo', postgresql_using='gist')
    op.drop_table('addressgeo')
    op.drop_table('activity')
    # ### end Alembic commands ###
