// This file is auto-generated by @hey-api/openapi-ts

export const ActivitiesPublicSchema = {
	properties: {
		data: {
			items: {
				$ref: '#/components/schemas/ActivityPublic'
			},
			type: 'array',
			title: 'Data'
		}
	},
	type: 'object',
	required: ['data'],
	title: 'ActivitiesPublic'
} as const;

export const ActivityCreateSchema = {
	properties: {
		name: {
			type: 'string',
			title: 'Name'
		},
		parent_path: {
			anyOf: [
				{
					type: 'string',
					examples: ['some.path']
				},
				{
					type: 'null'
				}
			],
			title: 'Parent Path'
		}
	},
	type: 'object',
	required: ['name'],
	title: 'ActivityCreate'
} as const;

export const ActivityDeleteResponseSchema = {
	properties: {
		rowcount: {
			type: 'integer',
			title: 'Rowcount'
		}
	},
	type: 'object',
	required: ['rowcount'],
	title: 'ActivityDeleteResponse'
} as const;

export const ActivityPublicSchema = {
	properties: {
		id: {
			type: 'string',
			format: 'uuid',
			title: 'Id'
		},
		name: {
			type: 'string',
			title: 'Name'
		},
		path: {
			type: 'string',
			title: 'Path',
			examples: ['some.path']
		}
	},
	type: 'object',
	required: ['id', 'name', 'path'],
	title: 'ActivityPublic'
} as const;

export const ActivityUpdateSchema = {
	properties: {
		name: {
			anyOf: [
				{
					type: 'string'
				},
				{
					type: 'null'
				}
			],
			title: 'Name'
		},
		parent_path: {
			anyOf: [
				{
					type: 'string',
					examples: ['some.path']
				},
				{
					type: 'null'
				}
			],
			title: 'Parent Path'
		}
	},
	type: 'object',
	title: 'ActivityUpdate'
} as const;

export const ActivityUpdateResponseSchema = {
	properties: {
		lca: {
			anyOf: [
				{
					type: 'string',
					examples: ['some.path']
				},
				{
					type: 'null'
				}
			],
			title: 'Lca'
		},
		rowcount: {
			type: 'integer',
			title: 'Rowcount'
		}
	},
	type: 'object',
	required: ['lca', 'rowcount'],
	title: 'ActivityUpdateResponse'
} as const;

export const Body_login_access_tokenSchema = {
	properties: {
		grant_type: {
			anyOf: [
				{
					type: 'string',
					pattern: 'password'
				},
				{
					type: 'null'
				}
			],
			title: 'Grant Type'
		},
		username: {
			type: 'string',
			title: 'Username'
		},
		password: {
			type: 'string',
			title: 'Password'
		},
		scope: {
			type: 'string',
			title: 'Scope',
			default: ''
		},
		client_id: {
			anyOf: [
				{
					type: 'string'
				},
				{
					type: 'null'
				}
			],
			title: 'Client Id'
		},
		client_secret: {
			anyOf: [
				{
					type: 'string'
				},
				{
					type: 'null'
				}
			],
			title: 'Client Secret'
		}
	},
	type: 'object',
	required: ['username', 'password'],
	title: 'Body_login-access_token'
} as const;

export const DeleteResponseSchema = {
	properties: {
		success: {
			type: 'boolean',
			title: 'Success'
		},
		message: {
			anyOf: [
				{
					type: 'string'
				},
				{
					type: 'null'
				}
			],
			title: 'Message'
		}
	},
	type: 'object',
	required: ['success'],
	title: 'DeleteResponse',
	description: 'Response schema for any paged API.'
} as const;

export const HTTPValidationErrorSchema = {
	properties: {
		detail: {
			items: {
				$ref: '#/components/schemas/ValidationError'
			},
			type: 'array',
			title: 'Detail'
		}
	},
	type: 'object',
	title: 'HTTPValidationError'
} as const;

export const MessageSchema = {
	properties: {
		message: {
			type: 'string',
			title: 'Message'
		}
	},
	type: 'object',
	required: ['message'],
	title: 'Message'
} as const;

export const NewPasswordSchema = {
	properties: {
		token: {
			type: 'string',
			title: 'Token'
		},
		new_password: {
			type: 'string',
			maxLength: 40,
			minLength: 8,
			title: 'New Password'
		}
	},
	type: 'object',
	required: ['token', 'new_password'],
	title: 'NewPassword'
} as const;

export const OrganisationCreateSchema = {
	properties: {
		name: {
			type: 'string',
			title: 'Name'
		}
	},
	type: 'object',
	required: ['name'],
	title: 'OrganisationCreate'
} as const;

export const OrganisationPublicSchema = {
	properties: {
		id: {
			type: 'string',
			format: 'uuid',
			title: 'Id'
		},
		name: {
			type: 'string',
			title: 'Name'
		}
	},
	type: 'object',
	required: ['id', 'name'],
	title: 'OrganisationPublic'
} as const;

export const OrganisationUpdateSchema = {
	properties: {
		name: {
			anyOf: [
				{
					type: 'string'
				},
				{
					type: 'null'
				}
			],
			title: 'Name'
		}
	},
	type: 'object',
	title: 'OrganisationUpdate'
} as const;

export const PagedResponse_OrganisationPublic_Schema = {
	properties: {
		total: {
			type: 'integer',
			title: 'Total'
		},
		limit: {
			type: 'integer',
			title: 'Limit'
		},
		offset: {
			type: 'integer',
			title: 'Offset'
		},
		results: {
			items: {
				$ref: '#/components/schemas/OrganisationPublic'
			},
			type: 'array',
			title: 'Results'
		}
	},
	type: 'object',
	required: ['total', 'limit', 'offset', 'results'],
	title: 'PagedResponse[OrganisationPublic]'
} as const;

export const PagedResponse_PersonPublic_Schema = {
	properties: {
		total: {
			type: 'integer',
			title: 'Total'
		},
		limit: {
			type: 'integer',
			title: 'Limit'
		},
		offset: {
			type: 'integer',
			title: 'Offset'
		},
		results: {
			items: {
				$ref: '#/components/schemas/PersonPublic'
			},
			type: 'array',
			title: 'Results'
		}
	},
	type: 'object',
	required: ['total', 'limit', 'offset', 'results'],
	title: 'PagedResponse[PersonPublic]'
} as const;

export const PersonCreateSchema = {
	properties: {
		name: {
			type: 'string',
			title: 'Name'
		}
	},
	type: 'object',
	required: ['name'],
	title: 'PersonCreate'
} as const;

export const PersonPublicSchema = {
	properties: {
		id: {
			type: 'string',
			format: 'uuid',
			title: 'Id'
		},
		name: {
			type: 'string',
			title: 'Name'
		}
	},
	type: 'object',
	required: ['id', 'name'],
	title: 'PersonPublic'
} as const;

export const PersonUpdateSchema = {
	properties: {
		name: {
			anyOf: [
				{
					type: 'string'
				},
				{
					type: 'null'
				}
			],
			title: 'Name'
		}
	},
	type: 'object',
	title: 'PersonUpdate'
} as const;

export const TokenSchema = {
	properties: {
		access_token: {
			type: 'string',
			title: 'Access Token'
		},
		token_type: {
			type: 'string',
			title: 'Token Type',
			default: 'bearer'
		}
	},
	type: 'object',
	required: ['access_token'],
	title: 'Token'
} as const;

export const UpdatePasswordSchema = {
	properties: {
		current_password: {
			type: 'string',
			maxLength: 40,
			minLength: 8,
			title: 'Current Password'
		},
		new_password: {
			type: 'string',
			maxLength: 40,
			minLength: 8,
			title: 'New Password'
		}
	},
	type: 'object',
	required: ['current_password', 'new_password'],
	title: 'UpdatePassword'
} as const;

export const UpdateResponse_OrganisationPublic_Schema = {
	properties: {
		success: {
			type: 'boolean',
			title: 'Success'
		},
		data: {
			anyOf: [
				{
					$ref: '#/components/schemas/OrganisationPublic'
				},
				{
					type: 'null'
				}
			]
		},
		message: {
			anyOf: [
				{
					type: 'string'
				},
				{
					type: 'null'
				}
			],
			title: 'Message'
		}
	},
	type: 'object',
	required: ['success'],
	title: 'UpdateResponse[OrganisationPublic]'
} as const;

export const UpdateResponse_PersonPublic_Schema = {
	properties: {
		success: {
			type: 'boolean',
			title: 'Success'
		},
		data: {
			anyOf: [
				{
					$ref: '#/components/schemas/PersonPublic'
				},
				{
					type: 'null'
				}
			]
		},
		message: {
			anyOf: [
				{
					type: 'string'
				},
				{
					type: 'null'
				}
			],
			title: 'Message'
		}
	},
	type: 'object',
	required: ['success'],
	title: 'UpdateResponse[PersonPublic]'
} as const;

export const UserCreateSchema = {
	properties: {
		email: {
			type: 'string',
			maxLength: 255,
			format: 'email',
			title: 'Email'
		},
		is_active: {
			type: 'boolean',
			title: 'Is Active',
			default: true
		},
		is_superuser: {
			type: 'boolean',
			title: 'Is Superuser',
			default: false
		},
		full_name: {
			anyOf: [
				{
					type: 'string',
					maxLength: 255
				},
				{
					type: 'null'
				}
			],
			title: 'Full Name'
		},
		password: {
			type: 'string',
			maxLength: 40,
			minLength: 8,
			title: 'Password'
		}
	},
	type: 'object',
	required: ['email', 'password'],
	title: 'UserCreate'
} as const;

export const UserPublicSchema = {
	properties: {
		email: {
			type: 'string',
			maxLength: 255,
			format: 'email',
			title: 'Email'
		},
		is_active: {
			type: 'boolean',
			title: 'Is Active',
			default: true
		},
		is_superuser: {
			type: 'boolean',
			title: 'Is Superuser',
			default: false
		},
		full_name: {
			anyOf: [
				{
					type: 'string',
					maxLength: 255
				},
				{
					type: 'null'
				}
			],
			title: 'Full Name'
		},
		id: {
			type: 'string',
			format: 'uuid',
			title: 'Id'
		}
	},
	type: 'object',
	required: ['email', 'id'],
	title: 'UserPublic'
} as const;

export const UserRegisterSchema = {
	properties: {
		email: {
			type: 'string',
			maxLength: 255,
			format: 'email',
			title: 'Email'
		},
		password: {
			type: 'string',
			maxLength: 40,
			minLength: 8,
			title: 'Password'
		},
		full_name: {
			anyOf: [
				{
					type: 'string',
					maxLength: 255
				},
				{
					type: 'null'
				}
			],
			title: 'Full Name'
		}
	},
	type: 'object',
	required: ['email', 'password'],
	title: 'UserRegister'
} as const;

export const UserUpdateSchema = {
	properties: {
		email: {
			anyOf: [
				{
					type: 'string',
					maxLength: 255,
					format: 'email'
				},
				{
					type: 'null'
				}
			],
			title: 'Email'
		},
		is_active: {
			type: 'boolean',
			title: 'Is Active',
			default: true
		},
		is_superuser: {
			type: 'boolean',
			title: 'Is Superuser',
			default: false
		},
		full_name: {
			anyOf: [
				{
					type: 'string',
					maxLength: 255
				},
				{
					type: 'null'
				}
			],
			title: 'Full Name'
		},
		password: {
			anyOf: [
				{
					type: 'string',
					maxLength: 40,
					minLength: 8
				},
				{
					type: 'null'
				}
			],
			title: 'Password'
		}
	},
	type: 'object',
	title: 'UserUpdate'
} as const;

export const UserUpdateMeSchema = {
	properties: {
		full_name: {
			anyOf: [
				{
					type: 'string',
					maxLength: 255
				},
				{
					type: 'null'
				}
			],
			title: 'Full Name'
		},
		email: {
			anyOf: [
				{
					type: 'string',
					maxLength: 255,
					format: 'email'
				},
				{
					type: 'null'
				}
			],
			title: 'Email'
		}
	},
	type: 'object',
	title: 'UserUpdateMe'
} as const;

export const UsersPublicSchema = {
	properties: {
		data: {
			items: {
				$ref: '#/components/schemas/UserPublic'
			},
			type: 'array',
			title: 'Data'
		},
		count: {
			type: 'integer',
			title: 'Count'
		}
	},
	type: 'object',
	required: ['data', 'count'],
	title: 'UsersPublic'
} as const;

export const ValidationErrorSchema = {
	properties: {
		loc: {
			items: {
				anyOf: [
					{
						type: 'string'
					},
					{
						type: 'integer'
					}
				]
			},
			type: 'array',
			title: 'Location'
		},
		msg: {
			type: 'string',
			title: 'Message'
		},
		type: {
			type: 'string',
			title: 'Error Type'
		}
	},
	type: 'object',
	required: ['loc', 'msg', 'type'],
	title: 'ValidationError'
} as const;
