// This file is auto-generated by @hey-api/openapi-ts

import {
	createClient,
	createConfig,
	type Options,
	urlSearchParamsBodySerializer,
} from "@hey-api/client-fetch";
import type {
	ExploreGetDataData,
	ExploreGetDataResponse,
	ExploreGetDataError,
	ToursGetAllToursData,
	ToursGetAllToursResponse,
	ToursGetAllToursError,
	ToursGetTourData,
	ToursGetTourResponse,
	ToursGetTourError,
	DirectoryGetAllActorsData,
	DirectoryGetAllActorsResponse,
	DirectoryGetAllActorsError,
	DirectoryGetOrgData,
	DirectoryGetOrgResponse,
	DirectoryGetOrgError,
	DirectoryGetPersonData,
	DirectoryGetPersonResponse,
	DirectoryGetPersonError,
	LoginAccessTokenData,
	LoginAccessTokenResponse,
	LoginAccessTokenError,
	LoginTestTokenData,
	LoginTestTokenResponse,
	LoginRecoverPasswordData,
	LoginRecoverPasswordResponse,
	LoginRecoverPasswordError,
	LoginResetPasswordData,
	LoginResetPasswordResponse,
	LoginResetPasswordError,
	LoginRecoverPasswordHtmlContentData,
	LoginRecoverPasswordHtmlContentResponse,
	LoginRecoverPasswordHtmlContentError,
	UsersReadData,
	UsersReadResponse,
	UsersReadError,
	UsersCreateData,
	UsersCreateResponse,
	UsersCreateError,
	UsersReadUserMeData,
	UsersReadUserMeResponse,
	UsersRegisterData,
	UsersRegisterResponse,
	UsersRegisterError,
	UsersDeleteData,
	UsersDeleteResponse,
	UsersDeleteError,
	UsersReadByIdData,
	UsersReadByIdResponse,
	UsersReadByIdError,
	UsersUpdateData,
	UsersUpdateResponse,
	UsersUpdateError,
	UtilsTestEmailData,
	UtilsTestEmailResponse,
	UtilsTestEmailError,
	UtilsHealthCheckData,
	UtilsHealthCheckResponse,
	ActivitiesGetActivitiesByPathData,
	ActivitiesGetActivitiesByPathResponse,
	ActivitiesGetActivitiesByPathError,
	ActivitiesGetActivitiesData,
	ActivitiesGetActivitiesResponse,
	ActivitiesGetActivitiesError,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Get Data
 */
export const exploreGetData = <ThrowOnError extends boolean = false>(
	options: Options<ExploreGetDataData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ExploreGetDataResponse, ExploreGetDataError, ThrowOnError>(
		{
			security: [
				{
					scheme: "bearer",
					type: "http",
				},
			],
			url: "/api/explore/",
			...options,
		},
	);
};

/**
 * Get All Tours
 * Paginated list of tours
 */
export const toursGetAllTours = <ThrowOnError extends boolean = false>(
	options?: Options<ToursGetAllToursData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		ToursGetAllToursResponse,
		ToursGetAllToursError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/tours/",
		...options,
	});
};

/**
 * Get Tour
 * Tour details
 */
export const toursGetTour = <ThrowOnError extends boolean = false>(
	options: Options<ToursGetTourData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<ToursGetTourResponse, ToursGetTourError, ThrowOnError>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/tours/tours/{id}",
		...options,
	});
};

/**
 * Get All Actors
 * Paginated list of actors
 */
export const directoryGetAllActors = <ThrowOnError extends boolean = false>(
	options?: Options<DirectoryGetAllActorsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		DirectoryGetAllActorsResponse,
		DirectoryGetAllActorsError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/directory/",
		...options,
	});
};

/**
 * Get Org
 * Org details
 */
export const directoryGetOrg = <ThrowOnError extends boolean = false>(
	options: Options<DirectoryGetOrgData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		DirectoryGetOrgResponse,
		DirectoryGetOrgError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/directory/orgs/{id}",
		...options,
	});
};

/**
 * Get Person
 * Person details
 */
export const directoryGetPerson = <ThrowOnError extends boolean = false>(
	options: Options<DirectoryGetPersonData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		DirectoryGetPersonResponse,
		DirectoryGetPersonError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/directory/people/{id}",
		...options,
	});
};

/**
 * Access Token
 * OAuth2 compatible token login, get an access token for future requests
 */
export const loginAccessToken = <ThrowOnError extends boolean = false>(
	options: Options<LoginAccessTokenData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LoginAccessTokenResponse,
		LoginAccessTokenError,
		ThrowOnError
	>({
		...urlSearchParamsBodySerializer,
		url: "/api/login/access-token",
		...options,
		headers: {
			"Content-Type": "application/x-www-form-urlencoded",
			...options?.headers,
		},
	});
};

/**
 * Test Token
 * Test access token
 */
export const loginTestToken = <ThrowOnError extends boolean = false>(
	options?: Options<LoginTestTokenData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<LoginTestTokenResponse, unknown, ThrowOnError>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/login/test-token",
		...options,
	});
};

/**
 * Recover Password
 * Password Recovery
 */
export const loginRecoverPassword = <ThrowOnError extends boolean = false>(
	options: Options<LoginRecoverPasswordData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LoginRecoverPasswordResponse,
		LoginRecoverPasswordError,
		ThrowOnError
	>({
		url: "/api/password-recovery/{email}",
		...options,
	});
};

/**
 * Reset Password
 * Reset password
 */
export const loginResetPassword = <ThrowOnError extends boolean = false>(
	options: Options<LoginResetPasswordData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LoginResetPasswordResponse,
		LoginResetPasswordError,
		ThrowOnError
	>({
		url: "/api/reset-password/",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Recover Password Html Content
 * HTML Content for Password Recovery
 */
export const loginRecoverPasswordHtmlContent = <ThrowOnError extends boolean = false>(
	options: Options<LoginRecoverPasswordHtmlContentData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LoginRecoverPasswordHtmlContentResponse,
		LoginRecoverPasswordHtmlContentError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/password-recovery-html-content/{email}",
		...options,
	});
};

/**
 * Read
 * Read users.
 */
export const usersRead = <ThrowOnError extends boolean = false>(
	options?: Options<UsersReadData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<UsersReadResponse, UsersReadError, ThrowOnError>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/users/",
		...options,
	});
};

/**
 * Create
 * Create new user.
 */
export const usersCreate = <ThrowOnError extends boolean = false>(
	options: Options<UsersCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<UsersCreateResponse, UsersCreateError, ThrowOnError>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/users/",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Read User Me
 * Get current user.
 */
export const usersReadUserMe = <ThrowOnError extends boolean = false>(
	options?: Options<UsersReadUserMeData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<UsersReadUserMeResponse, unknown, ThrowOnError>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/users/me",
		...options,
	});
};

/**
 * Register
 * Create new user without the need to be logged in.
 */
export const usersRegister = <ThrowOnError extends boolean = false>(
	options: Options<UsersRegisterData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<UsersRegisterResponse, UsersRegisterError, ThrowOnError>({
		url: "/api/users/signup",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Delete
 * Delete a user.
 */
export const usersDelete = <ThrowOnError extends boolean = false>(
	options: Options<UsersDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<UsersDeleteResponse, UsersDeleteError, ThrowOnError>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/users/{user_id}",
		...options,
	});
};

/**
 * Read By Id
 * Get a specific user by id.
 */
export const usersReadById = <ThrowOnError extends boolean = false>(
	options: Options<UsersReadByIdData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<UsersReadByIdResponse, UsersReadByIdError, ThrowOnError>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/users/{user_id}",
		...options,
	});
};

/**
 * Update
 * Update a user.
 */
export const usersUpdate = <ThrowOnError extends boolean = false>(
	options: Options<UsersUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).patch<UsersUpdateResponse, UsersUpdateError, ThrowOnError>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/users/{user_id}",
		...options,
		headers: {
			"Content-Type": "application/json",
			...options?.headers,
		},
	});
};

/**
 * Test Email
 * Test emails.
 */
export const utilsTestEmail = <ThrowOnError extends boolean = false>(
	options: Options<UtilsTestEmailData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		UtilsTestEmailResponse,
		UtilsTestEmailError,
		ThrowOnError
	>({
		security: [
			{
				scheme: "bearer",
				type: "http",
			},
		],
		url: "/api/utils/test-email/",
		...options,
	});
};

/**
 * Health Check
 */
export const utilsHealthCheck = <ThrowOnError extends boolean = false>(
	options?: Options<UtilsHealthCheckData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<UtilsHealthCheckResponse, unknown, ThrowOnError>({
		url: "/api/utils/health-check/",
		...options,
	});
};

/**
 * Get Activities By Path
 * Read activities from a path.
 */
export const activitiesGetActivitiesByPath = <ThrowOnError extends boolean = false>(
	options: Options<ActivitiesGetActivitiesByPathData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		ActivitiesGetActivitiesByPathResponse,
		ActivitiesGetActivitiesByPathError,
		ThrowOnError
	>({
		url: "/api/activities/{path}",
		...options,
	});
};

/**
 * Get Activities
 * Read all activities.
 */
export const activitiesGetActivities = <ThrowOnError extends boolean = false>(
	options?: Options<ActivitiesGetActivitiesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		ActivitiesGetActivitiesResponse,
		ActivitiesGetActivitiesError,
		ThrowOnError
	>({
		url: "/api/activities/",
		...options,
	});
};
