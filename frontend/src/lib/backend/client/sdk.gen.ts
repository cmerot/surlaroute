// This file is auto-generated by @hey-api/openapi-ts

import {
	createClient,
	createConfig,
	type OptionsLegacyParser,
	urlSearchParamsBodySerializer,
} from "@hey-api/client-fetch";
import type {
	ToursGetAllToursData,
	ToursGetAllToursError,
	ToursGetAllToursResponse,
	ToursGetTourData,
	ToursGetTourError,
	ToursGetTourResponse,
	DirectoryGetAllActorsData,
	DirectoryGetAllActorsError,
	DirectoryGetAllActorsResponse,
	DirectoryGetOrgData,
	DirectoryGetOrgError,
	DirectoryGetOrgResponse,
	DirectoryGetPersonData,
	DirectoryGetPersonError,
	DirectoryGetPersonResponse,
	LoginAccessTokenData,
	LoginAccessTokenError,
	LoginAccessTokenResponse,
	LoginTestTokenError,
	LoginTestTokenResponse,
	LoginRecoverPasswordData,
	LoginRecoverPasswordError,
	LoginRecoverPasswordResponse,
	LoginResetPasswordData,
	LoginResetPasswordError,
	LoginResetPasswordResponse,
	LoginRecoverPasswordHtmlContentData,
	LoginRecoverPasswordHtmlContentError,
	LoginRecoverPasswordHtmlContentResponse,
	UsersReadData,
	UsersReadError,
	UsersReadResponse,
	UsersCreateData,
	UsersCreateError,
	UsersCreateResponse,
	UsersReadUserMeError,
	UsersReadUserMeResponse,
	UsersRegisterData,
	UsersRegisterError,
	UsersRegisterResponse,
	UsersReadByIdData,
	UsersReadByIdError,
	UsersReadByIdResponse,
	UsersUpdateData,
	UsersUpdateError,
	UsersUpdateResponse,
	UsersDeleteData,
	UsersDeleteError,
	UsersDeleteResponse,
	UtilsTestEmailData,
	UtilsTestEmailError,
	UtilsTestEmailResponse,
	UtilsHealthCheckError,
	UtilsHealthCheckResponse,
	ActivitiesGetActivitiesByPathData,
	ActivitiesGetActivitiesByPathError,
	ActivitiesGetActivitiesByPathResponse,
	ActivitiesGetActivitiesData,
	ActivitiesGetActivitiesError,
	ActivitiesGetActivitiesResponse,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Get All Tours
 * Paginated list of tours
 */
export const toursGetAllTours = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ToursGetAllToursData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		ToursGetAllToursResponse,
		ToursGetAllToursError,
		ThrowOnError
	>({
		...options,
		url: "/api/tours/",
	});
};

/**
 * Get Tour
 * Tour details
 */
export const toursGetTour = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<ToursGetTourData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		ToursGetTourResponse,
		ToursGetTourError,
		ThrowOnError
	>({
		...options,
		url: "/api/tours/tours/{id}",
	});
};

/**
 * Get All Actors
 * Paginated list of actors
 */
export const directoryGetAllActors = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<DirectoryGetAllActorsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		DirectoryGetAllActorsResponse,
		DirectoryGetAllActorsError,
		ThrowOnError
	>({
		...options,
		url: "/api/directory/",
	});
};

/**
 * Get Org
 * Org details
 */
export const directoryGetOrg = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<DirectoryGetOrgData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		DirectoryGetOrgResponse,
		DirectoryGetOrgError,
		ThrowOnError
	>({
		...options,
		url: "/api/directory/orgs/{id}",
	});
};

/**
 * Get Person
 * Person details
 */
export const directoryGetPerson = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<DirectoryGetPersonData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		DirectoryGetPersonResponse,
		DirectoryGetPersonError,
		ThrowOnError
	>({
		...options,
		url: "/api/directory/people/{id}",
	});
};

/**
 * Access Token
 * OAuth2 compatible token login, get an access token for future requests
 */
export const loginAccessToken = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<LoginAccessTokenData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LoginAccessTokenResponse,
		LoginAccessTokenError,
		ThrowOnError
	>({
		...options,
		...urlSearchParamsBodySerializer,
		headers: {
			"Content-Type": "application/x-www-form-urlencoded",
			...options?.headers,
		},
		url: "/api/login/access-token",
	});
};

/**
 * Test Token
 * Test access token
 */
export const loginTestToken = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LoginTestTokenResponse,
		LoginTestTokenError,
		ThrowOnError
	>({
		...options,
		url: "/api/login/test-token",
	});
};

/**
 * Recover Password
 * Password Recovery
 */
export const loginRecoverPassword = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<LoginRecoverPasswordData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LoginRecoverPasswordResponse,
		LoginRecoverPasswordError,
		ThrowOnError
	>({
		...options,
		url: "/api/password-recovery/{email}",
	});
};

/**
 * Reset Password
 * Reset password
 */
export const loginResetPassword = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<LoginResetPasswordData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		LoginResetPasswordResponse,
		LoginResetPasswordError,
		ThrowOnError
	>({
		...options,
		url: "/api/reset-password/",
	});
};

/**
 * Recover Password Html Content
 * HTML Content for Password Recovery
 */
export const loginRecoverPasswordHtmlContent = <
	ThrowOnError extends boolean = false,
>(
	options: OptionsLegacyParser<
		LoginRecoverPasswordHtmlContentData,
		ThrowOnError
	>,
) => {
	return (options?.client ?? client).post<
		LoginRecoverPasswordHtmlContentResponse,
		LoginRecoverPasswordHtmlContentError,
		ThrowOnError
	>({
		...options,
		url: "/api/password-recovery-html-content/{email}",
	});
};

/**
 * Read
 * Read users.
 */
export const usersRead = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<UsersReadData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		UsersReadResponse,
		UsersReadError,
		ThrowOnError
	>({
		...options,
		url: "/api/users/",
	});
};

/**
 * Create
 * Create new user.
 */
export const usersCreate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UsersCreateData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		UsersCreateResponse,
		UsersCreateError,
		ThrowOnError
	>({
		...options,
		url: "/api/users/",
	});
};

/**
 * Read User Me
 * Get current user.
 */
export const usersReadUserMe = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		UsersReadUserMeResponse,
		UsersReadUserMeError,
		ThrowOnError
	>({
		...options,
		url: "/api/users/me",
	});
};

/**
 * Register
 * Create new user without the need to be logged in.
 */
export const usersRegister = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UsersRegisterData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		UsersRegisterResponse,
		UsersRegisterError,
		ThrowOnError
	>({
		...options,
		url: "/api/users/signup",
	});
};

/**
 * Read By Id
 * Get a specific user by id.
 */
export const usersReadById = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UsersReadByIdData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		UsersReadByIdResponse,
		UsersReadByIdError,
		ThrowOnError
	>({
		...options,
		url: "/api/users/{user_id}",
	});
};

/**
 * Update
 * Update a user.
 */
export const usersUpdate = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UsersUpdateData, ThrowOnError>,
) => {
	return (options?.client ?? client).patch<
		UsersUpdateResponse,
		UsersUpdateError,
		ThrowOnError
	>({
		...options,
		url: "/api/users/{user_id}",
	});
};

/**
 * Delete
 * Delete a user.
 */
export const usersDelete = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UsersDeleteData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		UsersDeleteResponse,
		UsersDeleteError,
		ThrowOnError
	>({
		...options,
		url: "/api/users/{user_id}",
	});
};

/**
 * Test Email
 * Test emails.
 */
export const utilsTestEmail = <ThrowOnError extends boolean = false>(
	options: OptionsLegacyParser<UtilsTestEmailData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		UtilsTestEmailResponse,
		UtilsTestEmailError,
		ThrowOnError
	>({
		...options,
		url: "/api/utils/test-email/",
	});
};

/**
 * Health Check
 */
export const utilsHealthCheck = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		UtilsHealthCheckResponse,
		UtilsHealthCheckError,
		ThrowOnError
	>({
		...options,
		url: "/api/utils/health-check/",
	});
};

/**
 * Get Activities By Path
 * Read activities from a path.
 */
export const activitiesGetActivitiesByPath = <
	ThrowOnError extends boolean = false,
>(
	options: OptionsLegacyParser<ActivitiesGetActivitiesByPathData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		ActivitiesGetActivitiesByPathResponse,
		ActivitiesGetActivitiesByPathError,
		ThrowOnError
	>({
		...options,
		url: "/api/activities/{path}",
	});
};

/**
 * Get Activities
 * Read all activities.
 */
export const activitiesGetActivities = <ThrowOnError extends boolean = false>(
	options?: OptionsLegacyParser<ActivitiesGetActivitiesData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		ActivitiesGetActivitiesResponse,
		ActivitiesGetActivitiesError,
		ThrowOnError
	>({
		...options,
		url: "/api/activities/",
	});
};
