// This file is auto-generated by @hey-api/openapi-ts

export type ActorAssocPublic = {
	actor: OrgPublic | PersonPublic;
	data?: {
		[key: string]: unknown;
	} | null;
};

export type AddressPublic = {
	q: string;
	geom_point?: Point | null;
};

export type BaseModel = {
	[key: string]: unknown;
};

export type Body_login_access_token = {
	grant_type?: string | null;
	username: string;
	password: string;
	scope?: string;
	client_id?: string | null;
	client_secret?: string | null;
};

export type ContactPublic = {
	email_address?: string | null;
	phone_number?: string | null;
	address?: AddressPublic | null;
	website?: string | null;
};

export type ErrorResponse = {
	detail: string;
};

/**
 * Used for the /tours/{id} endpoint
 */
export type EventPublic = {
	owner_id?: string | null;
	owner?: OwnerPublic | null;
	group_owner_id?: string | null;
	group_owner?: GroupOwnerPublic | null;
	other_read: boolean;
	member_read: boolean;
	group_read: boolean;
	description?: string | null;
	start_dt: string;
	end_dt?: string | null;
	actor_assocs?: Array<ActorAssocPublic>;
};

/**
 * Feature Model
 */
export type Feature = {
	bbox?: [number, number, number, number] | [number, number, number, number, number, number] | null;
	type: "Feature";
	geometry:
		| (
				| Point
				| MultiPoint
				| LineString
				| MultiLineString
				| Polygon
				| MultiPolygon
				| GeometryCollection
		  )
		| null;
	properties:
		| {
				[key: string]: unknown;
		  }
		| BaseModel
		| null;
	id?: number | string | null;
};

export type type = "Feature";

/**
 * FeatureCollection Model
 */
export type FeatureCollection = {
	bbox?: [number, number, number, number] | [number, number, number, number, number, number] | null;
	type: "FeatureCollection";
	features: Array<Feature>;
};

export type type2 = "FeatureCollection";

/**
 * GeometryCollection Model
 */
export type GeometryCollection = {
	bbox?: [number, number, number, number] | [number, number, number, number, number, number] | null;
	type: "GeometryCollection";
	geometries: Array<
		Point | MultiPoint | LineString | MultiLineString | Polygon | MultiPolygon | GeometryCollection
	>;
};

export type type3 = "GeometryCollection";

export type GroupOwnerPublic = {
	id: string;
	name: string;
};

export type HTTPValidationError = {
	detail?: Array<ValidationError>;
};

/**
 * LineString Model
 */
export type LineString = {
	bbox?: [number, number, number, number] | [number, number, number, number, number, number] | null;
	type: "LineString";
	coordinates: Array<Position2D | Position3D>;
};

export type type4 = "LineString";

export type Message = {
	message: string;
};

/**
 * MultiLineString Model
 */
export type MultiLineString = {
	bbox?: [number, number, number, number] | [number, number, number, number, number, number] | null;
	type: "MultiLineString";
	coordinates: Array<Array<Position2D | Position3D>>;
};

export type type5 = "MultiLineString";

/**
 * MultiPoint Model
 */
export type MultiPoint = {
	bbox?: [number, number, number, number] | [number, number, number, number, number, number] | null;
	type: "MultiPoint";
	coordinates: Array<Position2D | Position3D>;
};

export type type6 = "MultiPoint";

/**
 * MultiPolygon Model
 */
export type MultiPolygon = {
	bbox?: [number, number, number, number] | [number, number, number, number, number, number] | null;
	type: "MultiPolygon";
	coordinates: Array<Array<Array<Position2D | Position3D>>>;
};

export type type7 = "MultiPolygon";

export type NewPassword = {
	token: string;
	new_password: string;
};

export type OrgAssocPublic = {
	org: OrgPublic;
	data?: {
		[key: string]: unknown;
	} | null;
};

export type OrgPublic = {
	owner_id?: string | null;
	owner?: OwnerPublic | null;
	group_owner_id?: string | null;
	group_owner?: GroupOwnerPublic | null;
	other_read: boolean;
	member_read: boolean;
	group_read: boolean;
	id: string;
	name: string;
	contact?: ContactPublic | null;
	membership_assocs: Array<OrgAssocPublic>;
	tour_assocs: Array<TourAssocPublic>;
	type: "Org";
	description?: string | null;
	activities: Array<TreePublic>;
	member_assocs: Array<ActorAssocPublic>;
};

export type type8 = "Org";

export type OwnerPersonPublic = {
	id: string;
	name: string;
};

export type OwnerPublic = {
	id: string;
	email: string;
	person?: OwnerPersonPublic | null;
};

export type PagedResponse_TourPublic_ = {
	total: number;
	limit: number;
	offset: number;
	results: Array<TourPublic>;
};

export type PagedResponse_TreePublic_ = {
	total: number;
	limit: number;
	offset: number;
	results: Array<TreePublic>;
};

export type PagedResponse_Union_OrgPublic__PersonPublic__ = {
	total: number;
	limit: number;
	offset: number;
	results: Array<OrgPublic | PersonPublic>;
};

export type PagedResponse_UserPublic_ = {
	total: number;
	limit: number;
	offset: number;
	results: Array<UserPublic>;
};

export type PersonPublic = {
	owner_id?: string | null;
	owner?: OwnerPublic | null;
	group_owner_id?: string | null;
	group_owner?: GroupOwnerPublic | null;
	other_read: boolean;
	member_read: boolean;
	group_read: boolean;
	id: string;
	name: string;
	contact?: ContactPublic | null;
	membership_assocs: Array<OrgAssocPublic>;
	tour_assocs: Array<TourAssocPublic>;
	type: "Person";
	role?: string | null;
};

export type type9 = "Person";

/**
 * Point Model
 */
export type Point = {
	bbox?: [number, number, number, number] | [number, number, number, number, number, number] | null;
	type: "Point";
	coordinates: Position2D | Position3D;
};

export type type10 = "Point";

/**
 * Polygon Model
 */
export type Polygon = {
	bbox?: [number, number, number, number] | [number, number, number, number, number, number] | null;
	type: "Polygon";
	coordinates: Array<Array<Position2D | Position3D>>;
};

export type type11 = "Polygon";

export type Position2D = [number, number];

export type Position3D = [number, number, number];

export type Token = {
	access_token: string;
	token_type?: string;
};

export type TourAssocPublic = {
	tour: TourPublic;
	data?: {
		[key: string]: unknown;
	} | null;
};

/**
 * Used for the /tours endpoint
 */
export type TourPublic = {
	owner_id?: string | null;
	owner?: OwnerPublic | null;
	group_owner_id?: string | null;
	group_owner?: GroupOwnerPublic | null;
	other_read: boolean;
	member_read: boolean;
	group_read: boolean;
	id: string;
	name: string;
	description?: string | null;
	year?: number | null;
	disciplines: Array<TreePublic>;
	mobilities: Array<TreePublic>;
	actor_assocs?: Array<ActorAssocPublic>;
	events: Array<EventPublic>;
	geojson?: FeatureCollection | null;
};

export type TreePublic = {
	name: string;
	path: string;
};

export type UserCreate = {
	email: string;
	is_active?: boolean;
	is_superuser?: boolean;
	is_member?: boolean;
	password: string;
};

export type UserPerson = {
	id: string;
	name: string;
	membership_assocs: Array<UserPersonOrgAssoc>;
};

export type UserPersonOrg = {
	id: string;
	name: string;
};

export type UserPersonOrgAssoc = {
	data: {
		[key: string]: unknown;
	};
	org: UserPersonOrg;
};

export type UserPublic = {
	email: string;
	is_active: boolean;
	is_superuser: boolean;
	is_member: boolean;
	id: string;
	person?: UserPerson | null;
};

export type UserRegister = {
	email: string;
	password: string;
};

export type UserUpdate = {
	email?: string | null;
	is_active?: boolean;
	is_superuser?: boolean;
	is_member?: boolean;
	password?: string | null;
};

export type ValidationError = {
	loc: Array<string | number>;
	msg: string;
	type: string;
};

export type ToursGetAllToursData = {
	query?: {
		limit?: number;
		offset?: number;
		q?: string | null;
	};
};

export type ToursGetAllToursResponse = PagedResponse_TourPublic_;

export type ToursGetAllToursError = HTTPValidationError;

export type ToursGetTourData = {
	path: {
		id: string;
	};
};

export type ToursGetTourResponse = TourPublic;

export type ToursGetTourError = ErrorResponse | HTTPValidationError;

export type DirectoryGetAllActorsData = {
	query?: {
		activity?: string | null;
		limit?: number;
		offset?: number;
		q?: string | null;
	};
};

export type DirectoryGetAllActorsResponse = PagedResponse_Union_OrgPublic__PersonPublic__;

export type DirectoryGetAllActorsError = HTTPValidationError;

export type DirectoryGetOrgData = {
	path: {
		id: string;
	};
};

export type DirectoryGetOrgResponse = OrgPublic;

export type DirectoryGetOrgError = ErrorResponse | HTTPValidationError;

export type DirectoryGetPersonData = {
	path: {
		id: string;
	};
};

export type DirectoryGetPersonResponse = PersonPublic;

export type DirectoryGetPersonError = ErrorResponse | HTTPValidationError;

export type LoginAccessTokenData = {
	body: Body_login_access_token;
};

export type LoginAccessTokenResponse = Token;

export type LoginAccessTokenError = HTTPValidationError;

export type LoginTestTokenResponse = UserPublic;

export type LoginTestTokenError = unknown;

export type LoginRecoverPasswordData = {
	path: {
		email: string;
	};
};

export type LoginRecoverPasswordResponse = Message;

export type LoginRecoverPasswordError = HTTPValidationError;

export type LoginResetPasswordData = {
	body: NewPassword;
};

export type LoginResetPasswordResponse = Message;

export type LoginResetPasswordError = HTTPValidationError;

export type LoginRecoverPasswordHtmlContentData = {
	path: {
		email: string;
	};
};

export type LoginRecoverPasswordHtmlContentResponse = string;

export type LoginRecoverPasswordHtmlContentError = HTTPValidationError;

export type UsersReadData = {
	query?: {
		limit?: number;
		offset?: number;
		q?: string | null;
	};
};

export type UsersReadResponse = PagedResponse_UserPublic_;

export type UsersReadError = HTTPValidationError;

export type UsersCreateData = {
	body: UserCreate;
};

export type UsersCreateResponse = UserPublic;

export type UsersCreateError = HTTPValidationError;

export type UsersReadUserMeResponse = UserPublic;

export type UsersReadUserMeError = unknown;

export type UsersRegisterData = {
	body: UserRegister;
};

export type UsersRegisterResponse = UserPublic;

export type UsersRegisterError = HTTPValidationError;

export type UsersReadByIdData = {
	path: {
		user_id: string;
	};
};

export type UsersReadByIdResponse = UserPublic;

export type UsersReadByIdError = ErrorResponse | HTTPValidationError;

export type UsersUpdateData = {
	body: UserUpdate;
	path: {
		user_id: string;
	};
};

export type UsersUpdateResponse = UserPublic;

export type UsersUpdateError = HTTPValidationError;

export type UsersDeleteData = {
	path: {
		user_id: string;
	};
};

export type UsersDeleteResponse = Message;

export type UsersDeleteError = HTTPValidationError;

export type UtilsTestEmailData = {
	query: {
		email_to: string;
	};
};

export type UtilsTestEmailResponse = Message;

export type UtilsTestEmailError = HTTPValidationError;

export type UtilsHealthCheckResponse = boolean;

export type UtilsHealthCheckError = unknown;

export type ActivitiesGetActivitiesByPathData = {
	path: {
		path: string;
	};
	query?: {
		descendant?: boolean;
		limit?: number;
		offset?: number;
		q?: string | null;
	};
};

export type ActivitiesGetActivitiesByPathResponse = PagedResponse_TreePublic_ | TreePublic;

export type ActivitiesGetActivitiesByPathError = HTTPValidationError;

export type ActivitiesGetActivitiesData = {
	query?: {
		limit?: number;
		offset?: number;
		q?: string | null;
	};
};

export type ActivitiesGetActivitiesResponse = PagedResponse_TreePublic_;

export type ActivitiesGetActivitiesError = HTTPValidationError;
