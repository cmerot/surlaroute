// This file is auto-generated by @hey-api/openapi-ts

export type ActivitiesPublic = {
	data: Array<ActivityPublic>;
};

export type ActivityCreate = {
	name: string;
	parent_path?: string | null;
};

export type ActivityDeleteResponse = {
	rowcount: number;
};

export type ActivityPublic = {
	id: string;
	name: string;
	path: string;
};

export type ActivityUpdate = {
	name?: string | null;
	parent_path?: string | null;
};

export type ActivityUpdateResponse = {
	lca: string | null;
	rowcount: number;
};

export type Body_login_access_token = {
	grant_type?: string | null;
	username: string;
	password: string;
	scope?: string;
	client_id?: string | null;
	client_secret?: string | null;
};

/**
 * Response schema for any paged API.
 */
export type DeleteResponse = {
	success: boolean;
	message?: string | null;
};

export type HTTPValidationError = {
	detail?: Array<ValidationError>;
};

export type Message = {
	message: string;
};

export type NewPassword = {
	token: string;
	new_password: string;
};

export type OrgCreate = {
	name: string;
};

export type OrgPublic = {
	id: string;
	name: string;
};

export type OrgUpdate = {
	name?: string | null;
};

export type PagedResponse_OrgPublic_ = {
	total: number;
	limit: number;
	offset: number;
	results: Array<OrgPublic>;
};

export type PagedResponse_PersonPublic_ = {
	total: number;
	limit: number;
	offset: number;
	results: Array<PersonPublic>;
};

export type PersonCreate = {
	name: string;
};

export type PersonPublic = {
	id: string;
	name: string;
};

export type PersonUpdate = {
	name?: string | null;
};

export type Token = {
	access_token: string;
	token_type?: string;
};

export type UpdatePassword = {
	current_password: string;
	new_password: string;
};

export type UpdateResponse_OrgPublic_ = {
	success: boolean;
	data?: OrgPublic | null;
	message?: string | null;
};

export type UpdateResponse_PersonPublic_ = {
	success: boolean;
	data?: PersonPublic | null;
	message?: string | null;
};

export type UserCreate = {
	email: string;
	is_active?: boolean;
	is_superuser?: boolean;
	full_name?: string | null;
	password: string;
};

export type UserPublic = {
	email: string;
	is_active?: boolean;
	is_superuser?: boolean;
	full_name?: string | null;
	id: string;
};

export type UserRegister = {
	email: string;
	password: string;
	full_name?: string | null;
};

export type UsersPublic = {
	data: Array<UserPublic>;
	count: number;
};

export type UserUpdate = {
	email?: string | null;
	is_active?: boolean;
	is_superuser?: boolean;
	full_name?: string | null;
	password?: string | null;
};

export type UserUpdateMe = {
	full_name?: string | null;
	email?: string | null;
};

export type ValidationError = {
	loc: Array<string | number>;
	msg: string;
	type: string;
};

export type LoginAccessTokenData = {
	body: Body_login_access_token;
};

export type LoginAccessTokenResponse = Token;

export type LoginAccessTokenError = HTTPValidationError;

export type LoginTestTokenResponse = UserPublic;

export type LoginTestTokenError = unknown;

export type LoginRecoverPasswordData = {
	path: {
		email: string;
	};
};

export type LoginRecoverPasswordResponse = Message;

export type LoginRecoverPasswordError = HTTPValidationError;

export type LoginResetPasswordData = {
	body: NewPassword;
};

export type LoginResetPasswordResponse = Message;

export type LoginResetPasswordError = HTTPValidationError;

export type LoginRecoverPasswordHtmlContentData = {
	path: {
		email: string;
	};
};

export type LoginRecoverPasswordHtmlContentResponse = string;

export type LoginRecoverPasswordHtmlContentError = HTTPValidationError;

export type UsersReadData = {
	query?: {
		limit?: number;
		skip?: number;
	};
};

export type UsersReadResponse = UsersPublic;

export type UsersReadError = HTTPValidationError;

export type UsersCreateData = {
	body: UserCreate;
};

export type UsersCreateResponse = UserPublic;

export type UsersCreateError = HTTPValidationError;

export type UsersReadMeResponse = UserPublic;

export type UsersReadMeError = unknown;

export type UsersDeleteMeResponse = Message;

export type UsersDeleteMeError = unknown;

export type UsersUpdateMeData = {
	body: UserUpdateMe;
};

export type UsersUpdateMeResponse = UserPublic;

export type UsersUpdateMeError = HTTPValidationError;

export type UsersUpdatePasswordMeData = {
	body: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = Message;

export type UsersUpdatePasswordMeError = HTTPValidationError;

export type UsersRegisterData = {
	body: UserRegister;
};

export type UsersRegisterResponse = UserPublic;

export type UsersRegisterError = HTTPValidationError;

export type UsersReadByIdData = {
	path: {
		user_id: string;
	};
};

export type UsersReadByIdResponse = UserPublic;

export type UsersReadByIdError = HTTPValidationError;

export type UsersUpdateData = {
	body: UserUpdate;
	path: {
		user_id: string;
	};
};

export type UsersUpdateResponse = UserPublic;

export type UsersUpdateError = HTTPValidationError;

export type UsersDeleteData = {
	path: {
		user_id: string;
	};
};

export type UsersDeleteResponse = Message;

export type UsersDeleteError = HTTPValidationError;

export type UtilsTestEmailData = {
	query: {
		email_to: string;
	};
};

export type UtilsTestEmailResponse = Message;

export type UtilsTestEmailError = HTTPValidationError;

export type UtilsHealthCheckResponse = boolean;

export type UtilsHealthCheckError = unknown;

export type ActivitiesReadActivitiesResponse = ActivitiesPublic;

export type ActivitiesReadActivitiesError = unknown;

export type ActivitiesCreateActivityData = {
	body: ActivityCreate;
};

export type ActivitiesCreateActivityResponse = ActivityPublic;

export type ActivitiesCreateActivityError = HTTPValidationError;

export type ActivitiesUpdateActivityData = {
	body: ActivityUpdate;
	path: {
		path: string;
	};
};

export type ActivitiesUpdateActivityResponse = ActivityUpdateResponse;

export type ActivitiesUpdateActivityError = HTTPValidationError;

export type ActivitiesReadActivitiesByPathData = {
	path: {
		path: string;
	};
	query?: {
		descendant?: boolean;
	};
};

export type ActivitiesReadActivitiesByPathResponse = ActivitiesPublic | ActivityPublic;

export type ActivitiesReadActivitiesByPathError = HTTPValidationError;

export type ActivitiesDeleteActivityData = {
	path: {
		path: string;
	};
};

export type ActivitiesDeleteActivityResponse = ActivityDeleteResponse;

export type ActivitiesDeleteActivityError = HTTPValidationError;

export type PeopleCreatePersonData = {
	body: PersonCreate;
};

export type PeopleCreatePersonResponse = PersonPublic;

export type PeopleCreatePersonError = HTTPValidationError;

export type PeopleReadPeopleData = {
	query?: {
		limit?: number;
		offset?: number;
		q?: string | null;
	};
};

export type PeopleReadPeopleResponse = PagedResponse_PersonPublic_;

export type PeopleReadPeopleError = HTTPValidationError;

export type PeopleReadPersonByIdData = {
	path: {
		id: string;
	};
};

export type PeopleReadPersonByIdResponse = PersonPublic;

export type PeopleReadPersonByIdError = HTTPValidationError;

export type PeopleUpdatePersonData = {
	body: PersonUpdate;
	path: {
		id: string;
	};
};

export type PeopleUpdatePersonResponse = UpdateResponse_PersonPublic_;

export type PeopleUpdatePersonError = HTTPValidationError;

export type PeopleDeletePersonData = {
	path: {
		id: string;
	};
};

export type PeopleDeletePersonResponse = DeleteResponse;

export type PeopleDeletePersonError = HTTPValidationError;

export type OrgsCreateOrgData = {
	body: OrgCreate;
};

export type OrgsCreateOrgResponse = OrgPublic;

export type OrgsCreateOrgError = HTTPValidationError;

export type OrgsReadOrgsData = {
	query?: {
		limit?: number;
		offset?: number;
		q?: string | null;
	};
};

export type OrgsReadOrgsResponse = PagedResponse_OrgPublic_;

export type OrgsReadOrgsError = HTTPValidationError;

export type OrgsReadOrgByIdData = {
	path: {
		id: string;
	};
};

export type OrgsReadOrgByIdResponse = OrgPublic;

export type OrgsReadOrgByIdError = HTTPValidationError;

export type OrgsUpdateOrgData = {
	body: OrgUpdate;
	path: {
		id: string;
	};
};

export type OrgsUpdateOrgResponse = UpdateResponse_OrgPublic_;

export type OrgsUpdateOrgError = HTTPValidationError;

export type OrgsDeleteOrgData = {
	path: {
		id: string;
	};
};

export type OrgsDeleteOrgResponse = DeleteResponse;

export type OrgsDeleteOrgError = HTTPValidationError;
