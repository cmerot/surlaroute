// This file is auto-generated by @hey-api/openapi-ts

export type ActorAssocCreate = {
	actor?: PersonCreate | OrgCreate | null;
};

/**
 * used to map any many-to-many relation impliying an actor
 * ex: OrgActorAssoc requires an org and an actor, so to render
 * the relation we'll use this. If we use a more specialized
 * model with actor and org, there will be recursion:
 * Org.member_assocs.org.member_assocs.org, ...
 */
export type ActorAssocPublic = {
	actor: PersonPublic | OrgPublic;
};

export type ActorAssocUpdate = {
	actor?: PersonUpdate | OrgUpdate | null;
};

export type AddressGeoCreate = {
	q?: string | null;
	street?: string | null;
	postal_code?: string | null;
	city?: string | null;
	country?: string | null;
	geom_point?: string | Point | null;
};

export type AddressGeoPublic = {
	q?: string | null;
	street?: string | null;
	postal_code?: string | null;
	city?: string | null;
	country?: string | null;
	geom_point?: Point | null;
	id: string;
};

export type AddressGeoUpdate = {
	q?: string | null;
	street?: string | null;
	postal_code?: string | null;
	city?: string | null;
	country?: string | null;
	geom_point?: string | Point | null;
};

export type Body_login_access_token = {
	grant_type?: string | null;
	username: string;
	password: string;
	scope?: string;
	client_id?: string | null;
	client_secret?: string | null;
};

export type ContactCreate = {
	email_address?: string | null;
	phone_number?: string | null;
	website?: string | null;
	address?: AddressGeoCreate | null;
};

export type ContactPublic = {
	email_address?: string | null;
	phone_number?: string | null;
	website?: string | null;
	id: string;
	address?: AddressGeoPublic | null;
};

export type ContactUpdate = {
	email_address?: string | null;
	phone_number?: string | null;
	website?: string | null;
	address?: AddressGeoUpdate | null;
};

/**
 * Response schema for any delete request.
 */
export type DeleteResponse = {
	success: boolean;
	data?: unknown | null;
	message?: string | null;
};

export type EventPublic = {
	description?: string | null;
	start_dt?: string | null;
	end_dt?: string | null;
	id: string;
	event_venue: OrgPublic;
	actor_assocs?: Array<ActorAssocPublic> | null;
};

export type HTTPValidationError = {
	detail?: Array<ValidationError>;
};

export type Message = {
	message: string;
};

export type NewPassword = {
	token: string;
	new_password: string;
};

/**
 * same than ActorAssocPublic but for from the POV of an actor
 */
export type OrgAssocPublic = {
	org: OrgPublic;
};

export type OrgCreate = {
	description?: string | null;
	type?: string;
	name: string;
	activities?: Array<TreeCreate> | null;
	member_assocs?: Array<ActorAssocCreate> | null;
	contact?: ContactCreate | null;
};

export type OrgPublic = {
	description?: string | null;
	type?: string;
	id: string;
	name: string;
	activities?: Array<TreePublic> | null;
	member_assocs?: Array<ActorAssocPublic> | null;
	contact?: ContactPublic | null;
};

export type OrgUpdate = {
	description?: string | null;
	type?: string;
	name?: string | null;
	activities?: Array<TreeUpdate> | null;
	member_assocs?: Array<ActorAssocUpdate> | null;
	contact?: ContactUpdate | null;
};

export type PagedResponse_OrgPublic_ = {
	total: number;
	limit: number;
	offset: number;
	results: Array<OrgPublic>;
};

export type PagedResponse_PersonPublic_ = {
	total: number;
	limit: number;
	offset: number;
	results: Array<PersonPublic>;
};

export type PagedResponse_TourPublic_ = {
	total: number;
	limit: number;
	offset: number;
	results: Array<TourPublic>;
};

export type PagedResponse_TreePublic_ = {
	total: number;
	limit: number;
	offset: number;
	results: Array<TreePublic>;
};

export type PagedResponse_UserPublic_ = {
	total: number;
	limit: number;
	offset: number;
	results: Array<UserPublic>;
};

export type PersonCreate = {
	type?: string;
	name: string;
	role?: string | null;
	contact?: ContactCreate | null;
};

export type PersonPublic = {
	type?: string;
	name: string;
	role?: string | null;
	id: string;
	contact?: ContactPublic | null;
	membership_assocs?: Array<OrgAssocPublic> | null;
};

export type PersonUpdate = {
	type?: string;
	name: string;
	role?: string | null;
	contact?: ContactUpdate | null;
};

/**
 * Point Model
 */
export type Point = {
	bbox?: [number, number, number, number] | [number, number, number, number, number, number] | null;
	type: 'Point';
	coordinates: Position2D | Position3D;
};

export type type = 'Point';

export type Position2D = [number, number];

export type Position3D = [number, number, number];

export type Token = {
	access_token: string;
	token_type?: string;
};

export type TourPublic = {
	name: string;
	description?: string | null;
	year?: number | null;
	id: string;
	events?: Array<EventPublic> | null;
	disciplines?: Array<TreePublic> | null;
	mobilities?: Array<TreePublic> | null;
	actor_assocs?: Array<ActorAssocPublic> | null;
};

export type TreeCreate = {
	path: string;
	name?: string | null;
};

export type TreePublic = {
	id?: string | null;
	path: string;
	name: string;
};

export type TreeUpdate = {
	dest_path?: string | null;
	name?: string | null;
};

export type UpdateResponse_OrgPublic_ = {
	success: boolean;
	data?: OrgPublic | null;
	message?: string | null;
};

export type UpdateResponse_PersonPublic_ = {
	success: boolean;
	data?: PersonPublic | null;
	message?: string | null;
};

export type UpdateResponse_TreePublic_ = {
	success: boolean;
	data?: TreePublic | null;
	message?: string | null;
};

export type UserCreate = {
	email: string;
	is_active?: boolean;
	is_superuser?: boolean;
	is_member?: boolean;
	password: string;
};

export type UserPublic = {
	email: string;
	is_active: boolean;
	is_superuser: boolean;
	is_member: boolean;
	id: string;
	person?: PersonPublic | null;
};

export type UserRegister = {
	email: string;
	password: string;
};

export type UserUpdate = {
	email?: string | null;
	is_active?: boolean;
	is_superuser?: boolean;
	is_member?: boolean;
	password?: string | null;
};

export type ValidationError = {
	loc: Array<string | number>;
	msg: string;
	type: string;
};

export type LoginAccessTokenData = {
	body: Body_login_access_token;
};

export type LoginAccessTokenResponse = Token;

export type LoginAccessTokenError = HTTPValidationError;

export type LoginTestTokenResponse = UserPublic;

export type LoginTestTokenError = unknown;

export type LoginRecoverPasswordData = {
	path: {
		email: string;
	};
};

export type LoginRecoverPasswordResponse = Message;

export type LoginRecoverPasswordError = HTTPValidationError;

export type LoginResetPasswordData = {
	body: NewPassword;
};

export type LoginResetPasswordResponse = Message;

export type LoginResetPasswordError = HTTPValidationError;

export type LoginRecoverPasswordHtmlContentData = {
	path: {
		email: string;
	};
};

export type LoginRecoverPasswordHtmlContentResponse = string;

export type LoginRecoverPasswordHtmlContentError = HTTPValidationError;

export type UsersReadData = {
	query?: {
		limit?: number;
		offset?: number;
		q?: string | null;
	};
};

export type UsersReadResponse = PagedResponse_UserPublic_;

export type UsersReadError = HTTPValidationError;

export type UsersCreateData = {
	body: UserCreate;
};

export type UsersCreateResponse = UserPublic;

export type UsersCreateError = HTTPValidationError;

export type UsersRegisterData = {
	body: UserRegister;
};

export type UsersRegisterResponse = UserPublic;

export type UsersRegisterError = HTTPValidationError;

export type UsersReadByIdData = {
	path: {
		user_id: string;
	};
};

export type UsersReadByIdResponse = UserPublic;

export type UsersReadByIdError = HTTPValidationError;

export type UsersUpdateData = {
	body: UserUpdate;
	path: {
		user_id: string;
	};
};

export type UsersUpdateResponse = UserPublic;

export type UsersUpdateError = HTTPValidationError;

export type UsersDeleteData = {
	path: {
		user_id: string;
	};
};

export type UsersDeleteResponse = Message;

export type UsersDeleteError = HTTPValidationError;

export type UtilsTestEmailData = {
	query: {
		email_to: string;
	};
};

export type UtilsTestEmailResponse = Message;

export type UtilsTestEmailError = HTTPValidationError;

export type UtilsHealthCheckResponse = boolean;

export type UtilsHealthCheckError = unknown;

export type ActivitiesCreateActivityData = {
	body: TreeCreate;
};

export type ActivitiesCreateActivityResponse = TreePublic;

export type ActivitiesCreateActivityError = HTTPValidationError;

export type ActivitiesReadActivitiesData = {
	query?: {
		limit?: number;
		offset?: number;
		q?: string | null;
	};
};

export type ActivitiesReadActivitiesResponse = PagedResponse_TreePublic_;

export type ActivitiesReadActivitiesError = HTTPValidationError;

export type ActivitiesReadActivitiesByPathData = {
	path: {
		path: string;
	};
	query?: {
		descendant?: boolean;
		limit?: number;
		offset?: number;
		q?: string | null;
	};
};

export type ActivitiesReadActivitiesByPathResponse = PagedResponse_TreePublic_ | TreePublic;

export type ActivitiesReadActivitiesByPathError = HTTPValidationError;

export type ActivitiesUpdateActivityData = {
	body: TreeUpdate;
	path: {
		path: string;
	};
};

export type ActivitiesUpdateActivityResponse = UpdateResponse_TreePublic_;

export type ActivitiesUpdateActivityError = HTTPValidationError;

export type ActivitiesDeleteActivityData = {
	path: {
		path: string;
	};
};

export type ActivitiesDeleteActivityResponse = DeleteResponse;

export type ActivitiesDeleteActivityError = HTTPValidationError;

export type PeopleCreatePersonData = {
	body: PersonCreate;
};

export type PeopleCreatePersonResponse = PersonPublic;

export type PeopleCreatePersonError = HTTPValidationError;

export type PeopleReadPeopleData = {
	query?: {
		limit?: number;
		offset?: number;
		q?: string | null;
	};
};

export type PeopleReadPeopleResponse = PagedResponse_PersonPublic_;

export type PeopleReadPeopleError = HTTPValidationError;

export type PeopleReadPersonByIdData = {
	path: {
		id: string;
	};
};

export type PeopleReadPersonByIdResponse = PersonPublic;

export type PeopleReadPersonByIdError = HTTPValidationError;

export type PeopleUpdatePersonData = {
	body: PersonUpdate;
	path: {
		id: string;
	};
};

export type PeopleUpdatePersonResponse = UpdateResponse_PersonPublic_;

export type PeopleUpdatePersonError = HTTPValidationError;

export type PeopleDeletePersonData = {
	path: {
		id: string;
	};
};

export type PeopleDeletePersonResponse = DeleteResponse;

export type PeopleDeletePersonError = HTTPValidationError;

export type OrgsCreateOrgData = {
	body: OrgCreate;
};

export type OrgsCreateOrgResponse = OrgPublic;

export type OrgsCreateOrgError = HTTPValidationError;

export type OrgsReadOrgsData = {
	query?: {
		limit?: number;
		offset?: number;
		q?: string | null;
	};
};

export type OrgsReadOrgsResponse = PagedResponse_OrgPublic_;

export type OrgsReadOrgsError = HTTPValidationError;

export type OrgsReadOrgByIdData = {
	path: {
		id: string;
	};
};

export type OrgsReadOrgByIdResponse = OrgPublic;

export type OrgsReadOrgByIdError = HTTPValidationError;

export type OrgsUpdateOrgData = {
	body: OrgUpdate;
	path: {
		id: string;
	};
};

export type OrgsUpdateOrgResponse = UpdateResponse_OrgPublic_;

export type OrgsUpdateOrgError = HTTPValidationError;

export type OrgsDeleteOrgData = {
	path: {
		id: string;
	};
};

export type OrgsDeleteOrgResponse = DeleteResponse;

export type OrgsDeleteOrgError = HTTPValidationError;

export type ToursReadTourByIdData = {
	path: {
		id: string;
	};
};

export type ToursReadTourByIdResponse = TourPublic;

export type ToursReadTourByIdError = HTTPValidationError;

export type ToursReadToursData = {
	query?: {
		limit?: number;
		offset?: number;
		q?: string | null;
	};
};

export type ToursReadToursResponse = PagedResponse_TourPublic_;

export type ToursReadToursError = HTTPValidationError;
