// This file is auto-generated by @hey-api/openapi-ts

export type ActorAssocPublic = {
	actor:
		| ({
				type?: "Org";
		  } & OrgPublic)
		| ({
				type?: "Person";
		  } & PersonPublic);
	data?: {
		[key: string]: unknown;
	} | null;
};

export type ActorFeature = {
	type: "Feature";
	geometry: Point;
	properties: OrgFeatureProperties | PersonFeatureProperties;
};

export type AddressPublic = {
	q: string;
	geom_point?: Point | null;
};

export type BaseModel = {
	[key: string]: unknown;
};

export type BodyLoginAccessToken = {
	grant_type?: string | null;
	username: string;
	password: string;
	scope?: string;
	client_id?: string | null;
	client_secret?: string | null;
};

export type ContactPublic = {
	email_address?: string | null;
	phone_number?: string | null;
	address?: AddressPublic | null;
	website?: string | null;
};

export type ErrorResponse = {
	detail: string;
};

export type EventPointFeature = {
	type: "Feature";
	geometry: Point;
	properties: EventPointFeatureProperties;
};

export type EventPointFeatureProperties = {
	id: string;
	type: "event_point";
	start_dt: string;
	end_dt?: string | null;
	tour_id: string;
	event_venues: Array<
		| ({
				type?: "Org";
		  } & OrgGeo)
		| ({
				type?: "Person";
		  } & PersonGeo)
	>;
};

/**
 * Used for the /tours/{id} endpoint
 */
export type EventPublic = {
	owner_id?: string | null;
	owner?: OwnerPublic | null;
	group_owner_id?: string | null;
	group_owner?: GroupOwnerPublic | null;
	other_read: boolean;
	member_read: boolean;
	group_read: boolean;
	id: string;
	description?: string | null;
	start_dt: string;
	end_dt?: string | null;
	actor_assocs: Array<ActorAssocPublic>;
};

/**
 * Feature Model
 */
export type Feature = {
	bbox?: [number, number, number, number] | [number, number, number, number, number, number] | null;
	type: "Feature";
	geometry:
		| (
				| ({
						type?: "Point";
				  } & Point)
				| ({
						type?: "MultiPoint";
				  } & MultiPoint)
				| ({
						type?: "LineString";
				  } & LineString)
				| ({
						type?: "MultiLineString";
				  } & MultiLineString)
				| ({
						type?: "Polygon";
				  } & Polygon)
				| ({
						type?: "MultiPolygon";
				  } & MultiPolygon)
				| ({
						type?: "GeometryCollection";
				  } & GeometryCollection)
		  )
		| null;
	properties:
		| {
				[key: string]: unknown;
		  }
		| BaseModel
		| null;
	id?: number | string | null;
};

/**
 * FeatureCollection Model
 */
export type FeatureCollection = {
	bbox?: [number, number, number, number] | [number, number, number, number, number, number] | null;
	type: "FeatureCollection";
	features: Array<Feature>;
};

/**
 * GeometryCollection Model
 */
export type GeometryCollection = {
	bbox?: [number, number, number, number] | [number, number, number, number, number, number] | null;
	type: "GeometryCollection";
	geometries: Array<
		| ({
				type?: "Point";
		  } & Point)
		| ({
				type?: "MultiPoint";
		  } & MultiPoint)
		| ({
				type?: "LineString";
		  } & LineString)
		| ({
				type?: "MultiLineString";
		  } & MultiLineString)
		| ({
				type?: "Polygon";
		  } & Polygon)
		| ({
				type?: "MultiPolygon";
		  } & MultiPolygon)
		| ({
				type?: "GeometryCollection";
		  } & GeometryCollection)
	>;
};

export type GroupOwnerPublic = {
	id: string;
	name: string;
};

export type HttpValidationError = {
	detail?: Array<ValidationError>;
};

/**
 * LineString Model
 */
export type LineString = {
	bbox?: [number, number, number, number] | [number, number, number, number, number, number] | null;
	type: "LineString";
	coordinates: Array<Position2D | Position3D>;
};

export type Message = {
	message: string;
};

/**
 * MultiLineString Model
 */
export type MultiLineString = {
	bbox?: [number, number, number, number] | [number, number, number, number, number, number] | null;
	type: "MultiLineString";
	coordinates: Array<Array<Position2D | Position3D>>;
};

/**
 * MultiPoint Model
 */
export type MultiPoint = {
	bbox?: [number, number, number, number] | [number, number, number, number, number, number] | null;
	type: "MultiPoint";
	coordinates: Array<Position2D | Position3D>;
};

/**
 * MultiPolygon Model
 */
export type MultiPolygon = {
	bbox?: [number, number, number, number] | [number, number, number, number, number, number] | null;
	type: "MultiPolygon";
	coordinates: Array<Array<Array<Position2D | Position3D>>>;
};

export type NewPassword = {
	token: string;
	new_password: string;
};

export type OrgAssocPublic = {
	org: OrgPublic;
	data?: {
		[key: string]: unknown;
	} | null;
};

export type OrgFeatureProperties = {
	id: string;
	type: "tour_actor" | "event_actor";
	parent_id: string;
	name: string;
	role?: string | null;
	actor_type?: "Org";
	description?: string | null;
	activities: Array<TreePublic>;
};

export type OrgGeo = {
	id: string;
	type: "Org";
	name: string;
	activities: Array<TreePublic>;
};

export type OrgPublic = {
	owner_id?: string | null;
	owner?: OwnerPublic | null;
	group_owner_id?: string | null;
	group_owner?: GroupOwnerPublic | null;
	other_read: boolean;
	member_read: boolean;
	group_read: boolean;
	id: string;
	name: string;
	contact?: ContactPublic | null;
	membership_assocs: Array<OrgAssocPublic>;
	tour_assocs: Array<TourAssocPublic>;
	type: "Org";
	description?: string | null;
	activities: Array<TreePublic>;
	member_assocs: Array<ActorAssocPublic>;
};

export type OwnerPersonPublic = {
	id: string;
	name: string;
};

export type OwnerPublic = {
	id: string;
	email: string;
	person?: OwnerPersonPublic | null;
};

export type PagedResponseTourPublic = {
	total: number;
	limit: number;
	offset: number;
	results: Array<TourPublic>;
};

export type PagedResponseTreePublic = {
	total: number;
	limit: number;
	offset: number;
	results: Array<TreePublic>;
};

export type PagedResponseUnionOrgPublicPersonPublic = {
	total: number;
	limit: number;
	offset: number;
	results: Array<OrgPublic | PersonPublic>;
};

export type PagedResponseUserPublic = {
	total: number;
	limit: number;
	offset: number;
	results: Array<UserPublic>;
};

export type PersonFeatureProperties = {
	id: string;
	type: "tour_actor" | "event_actor";
	parent_id: string;
	name: string;
	role?: string | null;
	actor_type?: "Person";
};

export type PersonGeo = {
	id: string;
	type: "Person";
	name: string;
};

export type PersonPublic = {
	owner_id?: string | null;
	owner?: OwnerPublic | null;
	group_owner_id?: string | null;
	group_owner?: GroupOwnerPublic | null;
	other_read: boolean;
	member_read: boolean;
	group_read: boolean;
	id: string;
	name: string;
	contact?: ContactPublic | null;
	membership_assocs: Array<OrgAssocPublic>;
	tour_assocs: Array<TourAssocPublic>;
	type: "Person";
	role?: string | null;
};

/**
 * Point Model
 */
export type Point = {
	bbox?: [number, number, number, number] | [number, number, number, number, number, number] | null;
	type: "Point";
	coordinates: Position2D | Position3D;
};

/**
 * Polygon Model
 */
export type Polygon = {
	bbox?: [number, number, number, number] | [number, number, number, number, number, number] | null;
	type: "Polygon";
	coordinates: Array<Array<Position2D | Position3D>>;
};

export type Position2D = [number, number];

export type Position3D = [number, number, number];

export type Token = {
	access_token: string;
	token_type?: string;
};

export type TourAssocPublic = {
	tour: TourPublic;
	data?: {
		[key: string]: unknown;
	} | null;
};

/**
 * GeoJSON description of a tour. One TourLineFeature and multiple EventPointFeature.
 *
 * Features:
 * - EventPointFeature: an event's venue as a point
 * - TourLineFeature: a multiline joining event venues
 *
 * Properties:
 * - some metadata about the tour: description, year, producers, disciplines, mobilities
 * - an ActorAssocFeatureCollection: show a tour's actors
 * - a list of ActorAssocFeatureCollection: show each event's actors
 */
export type TourFeatureCollection = {
	type: "FeatureCollection";
	features: Array<TourLineFeature | EventPointFeature | ActorFeature>;
	properties: TourFeatureCollectionProperties;
};

/**
 * Properties of a TourFeatureCollection.
 */
export type TourFeatureCollectionProperties = {
	id: string;
	type: "tour_collection";
	name: string;
	description?: string | null;
	year: number;
	producers: Array<
		| ({
				type?: "Org";
		  } & OrgGeo)
		| ({
				type?: "Person";
		  } & PersonGeo)
	>;
	disciplines: Array<TreePublic>;
	mobilities: Array<TreePublic>;
};

export type TourLineFeature = {
	type: "Feature";
	geometry: MultiLineString;
	properties: TourLineFeatureProperties;
};

export type TourLineFeatureProperties = {
	id: string;
	type: "tour_line";
};

/**
 * Used for the /tours endpoint
 */
export type TourPublic = {
	owner_id?: string | null;
	owner?: OwnerPublic | null;
	group_owner_id?: string | null;
	group_owner?: GroupOwnerPublic | null;
	other_read: boolean;
	member_read: boolean;
	group_read: boolean;
	id: string;
	name: string;
	description?: string | null;
	year?: number | null;
	disciplines: Array<TreePublic>;
	mobilities: Array<TreePublic>;
	actor_assocs: Array<ActorAssocPublic>;
	events: Array<EventPublic>;
	geojson?: FeatureCollection | null;
};

export type TreePublic = {
	name: string;
	path: string;
};

export type UserCreate = {
	email: string;
	is_active?: boolean;
	is_superuser?: boolean;
	is_member?: boolean;
	password: string;
};

export type UserPerson = {
	id: string;
	name: string;
	membership_assocs: Array<UserPersonOrgAssoc>;
};

export type UserPersonOrg = {
	id: string;
	name: string;
};

export type UserPersonOrgAssoc = {
	data: {
		[key: string]: unknown;
	};
	org: UserPersonOrg;
};

export type UserPublic = {
	email: string;
	is_active: boolean;
	is_superuser: boolean;
	is_member: boolean;
	id: string;
	person?: UserPerson | null;
};

export type UserRegister = {
	email: string;
	password: string;
};

export type UserUpdate = {
	email?: string | null;
	is_active?: boolean;
	is_superuser?: boolean;
	is_member?: boolean;
	password?: string | null;
};

export type ValidationError = {
	loc: Array<string | number>;
	msg: string;
	type: string;
};

export type ExploreGetDataData = {
	body?: never;
	path?: never;
	query: {
		q?: string | null;
		limit?: number;
		offset?: number;
		activity?: string | null;
		bbox: string;
		mobility_path?: string | null;
	};
	url: "/api/explore/";
};

export type ExploreGetDataErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type ExploreGetDataError = ExploreGetDataErrors[keyof ExploreGetDataErrors];

export type ExploreGetDataResponses = {
	/**
	 * Successful Response
	 */
	200: Array<TourFeatureCollection>;
};

export type ExploreGetDataResponse = ExploreGetDataResponses[keyof ExploreGetDataResponses];

export type ToursGetAllToursData = {
	body?: never;
	path?: never;
	query?: {
		q?: string | null;
		limit?: number;
		offset?: number;
	};
	url: "/api/tours/";
};

export type ToursGetAllToursErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type ToursGetAllToursError = ToursGetAllToursErrors[keyof ToursGetAllToursErrors];

export type ToursGetAllToursResponses = {
	/**
	 * Successful Response
	 */
	200: PagedResponseTourPublic;
};

export type ToursGetAllToursResponse = ToursGetAllToursResponses[keyof ToursGetAllToursResponses];

export type ToursGetTourData = {
	body?: never;
	path: {
		id: string;
	};
	query?: never;
	url: "/api/tours/tours/{id}";
};

export type ToursGetTourErrors = {
	/**
	 * Not Found
	 */
	404: ErrorResponse;
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type ToursGetTourError = ToursGetTourErrors[keyof ToursGetTourErrors];

export type ToursGetTourResponses = {
	/**
	 * Successful Response
	 */
	200: TourPublic;
};

export type ToursGetTourResponse = ToursGetTourResponses[keyof ToursGetTourResponses];

export type DirectoryGetAllActorsData = {
	body?: never;
	path?: never;
	query?: {
		q?: string | null;
		limit?: number;
		offset?: number;
		activity?: string | null;
	};
	url: "/api/directory/";
};

export type DirectoryGetAllActorsErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type DirectoryGetAllActorsError =
	DirectoryGetAllActorsErrors[keyof DirectoryGetAllActorsErrors];

export type DirectoryGetAllActorsResponses = {
	/**
	 * Successful Response
	 */
	200: PagedResponseUnionOrgPublicPersonPublic;
};

export type DirectoryGetAllActorsResponse =
	DirectoryGetAllActorsResponses[keyof DirectoryGetAllActorsResponses];

export type DirectoryGetOrgData = {
	body?: never;
	path: {
		id: string;
	};
	query?: never;
	url: "/api/directory/orgs/{id}";
};

export type DirectoryGetOrgErrors = {
	/**
	 * Not Found
	 */
	404: ErrorResponse;
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type DirectoryGetOrgError = DirectoryGetOrgErrors[keyof DirectoryGetOrgErrors];

export type DirectoryGetOrgResponses = {
	/**
	 * Successful Response
	 */
	200: OrgPublic;
};

export type DirectoryGetOrgResponse = DirectoryGetOrgResponses[keyof DirectoryGetOrgResponses];

export type DirectoryGetPersonData = {
	body?: never;
	path: {
		id: string;
	};
	query?: never;
	url: "/api/directory/people/{id}";
};

export type DirectoryGetPersonErrors = {
	/**
	 * Not Found
	 */
	404: ErrorResponse;
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type DirectoryGetPersonError = DirectoryGetPersonErrors[keyof DirectoryGetPersonErrors];

export type DirectoryGetPersonResponses = {
	/**
	 * Successful Response
	 */
	200: PersonPublic;
};

export type DirectoryGetPersonResponse =
	DirectoryGetPersonResponses[keyof DirectoryGetPersonResponses];

export type LoginAccessTokenData = {
	body: BodyLoginAccessToken;
	path?: never;
	query?: never;
	url: "/api/login/access-token";
};

export type LoginAccessTokenErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type LoginAccessTokenError = LoginAccessTokenErrors[keyof LoginAccessTokenErrors];

export type LoginAccessTokenResponses = {
	/**
	 * Successful Response
	 */
	200: Token;
};

export type LoginAccessTokenResponse = LoginAccessTokenResponses[keyof LoginAccessTokenResponses];

export type LoginTestTokenData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/login/test-token";
};

export type LoginTestTokenResponses = {
	/**
	 * Successful Response
	 */
	200: UserPublic;
};

export type LoginTestTokenResponse = LoginTestTokenResponses[keyof LoginTestTokenResponses];

export type LoginRecoverPasswordData = {
	body?: never;
	path: {
		email: string;
	};
	query?: never;
	url: "/api/password-recovery/{email}";
};

export type LoginRecoverPasswordErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type LoginRecoverPasswordError =
	LoginRecoverPasswordErrors[keyof LoginRecoverPasswordErrors];

export type LoginRecoverPasswordResponses = {
	/**
	 * Successful Response
	 */
	200: Message;
};

export type LoginRecoverPasswordResponse =
	LoginRecoverPasswordResponses[keyof LoginRecoverPasswordResponses];

export type LoginResetPasswordData = {
	body: NewPassword;
	path?: never;
	query?: never;
	url: "/api/reset-password/";
};

export type LoginResetPasswordErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type LoginResetPasswordError = LoginResetPasswordErrors[keyof LoginResetPasswordErrors];

export type LoginResetPasswordResponses = {
	/**
	 * Successful Response
	 */
	200: Message;
};

export type LoginResetPasswordResponse =
	LoginResetPasswordResponses[keyof LoginResetPasswordResponses];

export type LoginRecoverPasswordHtmlContentData = {
	body?: never;
	path: {
		email: string;
	};
	query?: never;
	url: "/api/password-recovery-html-content/{email}";
};

export type LoginRecoverPasswordHtmlContentErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type LoginRecoverPasswordHtmlContentError =
	LoginRecoverPasswordHtmlContentErrors[keyof LoginRecoverPasswordHtmlContentErrors];

export type LoginRecoverPasswordHtmlContentResponses = {
	/**
	 * Successful Response
	 */
	200: string;
};

export type LoginRecoverPasswordHtmlContentResponse =
	LoginRecoverPasswordHtmlContentResponses[keyof LoginRecoverPasswordHtmlContentResponses];

export type UsersReadData = {
	body?: never;
	path?: never;
	query?: {
		q?: string | null;
		limit?: number;
		offset?: number;
	};
	url: "/api/users/";
};

export type UsersReadErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UsersReadError = UsersReadErrors[keyof UsersReadErrors];

export type UsersReadResponses = {
	/**
	 * Successful Response
	 */
	200: PagedResponseUserPublic;
};

export type UsersReadResponse = UsersReadResponses[keyof UsersReadResponses];

export type UsersCreateData = {
	body: UserCreate;
	path?: never;
	query?: never;
	url: "/api/users/";
};

export type UsersCreateErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UsersCreateError = UsersCreateErrors[keyof UsersCreateErrors];

export type UsersCreateResponses = {
	/**
	 * Successful Response
	 */
	200: UserPublic;
};

export type UsersCreateResponse = UsersCreateResponses[keyof UsersCreateResponses];

export type UsersReadUserMeData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/users/me";
};

export type UsersReadUserMeResponses = {
	/**
	 * Successful Response
	 */
	200: UserPublic;
};

export type UsersReadUserMeResponse = UsersReadUserMeResponses[keyof UsersReadUserMeResponses];

export type UsersRegisterData = {
	body: UserRegister;
	path?: never;
	query?: never;
	url: "/api/users/signup";
};

export type UsersRegisterErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UsersRegisterError = UsersRegisterErrors[keyof UsersRegisterErrors];

export type UsersRegisterResponses = {
	/**
	 * Successful Response
	 */
	200: UserPublic;
};

export type UsersRegisterResponse = UsersRegisterResponses[keyof UsersRegisterResponses];

export type UsersDeleteData = {
	body?: never;
	path: {
		user_id: string;
	};
	query?: never;
	url: "/api/users/{user_id}";
};

export type UsersDeleteErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UsersDeleteError = UsersDeleteErrors[keyof UsersDeleteErrors];

export type UsersDeleteResponses = {
	/**
	 * Successful Response
	 */
	200: Message;
};

export type UsersDeleteResponse = UsersDeleteResponses[keyof UsersDeleteResponses];

export type UsersReadByIdData = {
	body?: never;
	path: {
		user_id: string;
	};
	query?: never;
	url: "/api/users/{user_id}";
};

export type UsersReadByIdErrors = {
	/**
	 * Unauthorized
	 */
	401: ErrorResponse;
	/**
	 * Forbidden
	 */
	403: ErrorResponse;
	/**
	 * Not Found
	 */
	404: ErrorResponse;
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UsersReadByIdError = UsersReadByIdErrors[keyof UsersReadByIdErrors];

export type UsersReadByIdResponses = {
	/**
	 * Successful Response
	 */
	200: UserPublic;
};

export type UsersReadByIdResponse = UsersReadByIdResponses[keyof UsersReadByIdResponses];

export type UsersUpdateData = {
	body: UserUpdate;
	path: {
		user_id: string;
	};
	query?: never;
	url: "/api/users/{user_id}";
};

export type UsersUpdateErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UsersUpdateError = UsersUpdateErrors[keyof UsersUpdateErrors];

export type UsersUpdateResponses = {
	/**
	 * Successful Response
	 */
	200: UserPublic;
};

export type UsersUpdateResponse = UsersUpdateResponses[keyof UsersUpdateResponses];

export type UtilsTestEmailData = {
	body?: never;
	path?: never;
	query: {
		email_to: string;
	};
	url: "/api/utils/test-email/";
};

export type UtilsTestEmailErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type UtilsTestEmailError = UtilsTestEmailErrors[keyof UtilsTestEmailErrors];

export type UtilsTestEmailResponses = {
	/**
	 * Successful Response
	 */
	201: Message;
};

export type UtilsTestEmailResponse = UtilsTestEmailResponses[keyof UtilsTestEmailResponses];

export type UtilsHealthCheckData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/utils/health-check/";
};

export type UtilsHealthCheckResponses = {
	/**
	 * Successful Response
	 */
	200: boolean;
};

export type UtilsHealthCheckResponse = UtilsHealthCheckResponses[keyof UtilsHealthCheckResponses];

export type ActivitiesGetActivitiesByPathData = {
	body?: never;
	path: {
		path: string;
	};
	query?: {
		descendant?: boolean;
		q?: string | null;
		limit?: number;
		offset?: number;
	};
	url: "/api/activities/{path}";
};

export type ActivitiesGetActivitiesByPathErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type ActivitiesGetActivitiesByPathError =
	ActivitiesGetActivitiesByPathErrors[keyof ActivitiesGetActivitiesByPathErrors];

export type ActivitiesGetActivitiesByPathResponses = {
	/**
	 * Successful Response
	 */
	200: PagedResponseTreePublic | TreePublic;
};

export type ActivitiesGetActivitiesByPathResponse =
	ActivitiesGetActivitiesByPathResponses[keyof ActivitiesGetActivitiesByPathResponses];

export type ActivitiesGetActivitiesData = {
	body?: never;
	path?: never;
	query?: {
		q?: string | null;
		limit?: number;
		offset?: number;
	};
	url: "/api/activities/";
};

export type ActivitiesGetActivitiesErrors = {
	/**
	 * Validation Error
	 */
	422: HttpValidationError;
};

export type ActivitiesGetActivitiesError =
	ActivitiesGetActivitiesErrors[keyof ActivitiesGetActivitiesErrors];

export type ActivitiesGetActivitiesResponses = {
	/**
	 * Successful Response
	 */
	200: PagedResponseTreePublic;
};

export type ActivitiesGetActivitiesResponse =
	ActivitiesGetActivitiesResponses[keyof ActivitiesGetActivitiesResponses];
