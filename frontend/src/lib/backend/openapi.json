{
	"openapi": "3.1.0",
	"info": { "title": "Sur la route", "version": "0.1.0" },
	"paths": {
		"/api/tours/": {
			"get": {
				"tags": ["tours"],
				"summary": "Get All Tours",
				"description": "Paginated list of tours",
				"operationId": "tours-get_all_tours",
				"security": [{ "OAuth2PasswordBearer": [] }],
				"parameters": [
					{
						"name": "q",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [{ "type": "string" }, { "type": "null" }],
							"title": "Q"
						}
					},
					{
						"name": "limit",
						"in": "query",
						"required": false,
						"schema": {
							"type": "integer",
							"maximum": 100,
							"exclusiveMinimum": 0,
							"default": 10,
							"title": "Limit"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"required": false,
						"schema": {
							"type": "integer",
							"minimum": 0,
							"default": 0,
							"title": "Offset"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PagedResponse_TourPublic_"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/api/tours/tours/{id}": {
			"get": {
				"tags": ["tours"],
				"summary": "Get Tour",
				"description": "Tour details",
				"operationId": "tours-get_tour",
				"security": [{ "OAuth2PasswordBearer": [] }],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": { "type": "string", "format": "uuid", "title": "Id" }
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/TourPublic" }
							}
						}
					},
					"404": {
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						},
						"description": "Not Found"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/api/directory/": {
			"get": {
				"tags": ["directory"],
				"summary": "Get All Actors",
				"description": "Paginated list of actors",
				"operationId": "directory-get_all_actors",
				"security": [{ "OAuth2PasswordBearer": [] }],
				"parameters": [
					{
						"name": "q",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [{ "type": "string" }, { "type": "null" }],
							"title": "Q"
						}
					},
					{
						"name": "limit",
						"in": "query",
						"required": false,
						"schema": {
							"type": "integer",
							"maximum": 100,
							"exclusiveMinimum": 0,
							"default": 10,
							"title": "Limit"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"required": false,
						"schema": {
							"type": "integer",
							"minimum": 0,
							"default": 0,
							"title": "Offset"
						}
					},
					{
						"name": "activity",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [{ "type": "string" }, { "type": "null" }],
							"title": "Activity"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PagedResponse_Union_OrgPublic__PersonPublic__"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/api/directory/orgs/{id}": {
			"get": {
				"tags": ["directory"],
				"summary": "Get Org",
				"description": "Org details",
				"operationId": "directory-get_org",
				"security": [{ "OAuth2PasswordBearer": [] }],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": { "type": "string", "format": "uuid", "title": "Id" }
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/OrgPublic" }
							}
						}
					},
					"404": {
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						},
						"description": "Not Found"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/api/directory/people/{id}": {
			"get": {
				"tags": ["directory"],
				"summary": "Get Person",
				"description": "Person details",
				"operationId": "directory-get_person",
				"security": [{ "OAuth2PasswordBearer": [] }],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": { "type": "string", "format": "uuid", "title": "Id" }
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/PersonPublic" }
							}
						}
					},
					"404": {
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						},
						"description": "Not Found"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/api/login/access-token": {
			"post": {
				"tags": ["login"],
				"summary": "Access Token",
				"description": "OAuth2 compatible token login, get an access token for future requests",
				"operationId": "login-access_token",
				"requestBody": {
					"content": {
						"application/x-www-form-urlencoded": {
							"schema": {
								"$ref": "#/components/schemas/Body_login-access_token"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/Token" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/api/login/test-token": {
			"post": {
				"tags": ["login"],
				"summary": "Test Token",
				"description": "Test access token",
				"operationId": "login-test_token",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserPublic" }
							}
						}
					}
				},
				"security": [{ "OAuth2PasswordBearer": [] }]
			}
		},
		"/api/password-recovery/{email}": {
			"post": {
				"tags": ["login"],
				"summary": "Recover Password",
				"description": "Password Recovery",
				"operationId": "login-recover_password",
				"parameters": [
					{
						"name": "email",
						"in": "path",
						"required": true,
						"schema": { "type": "string", "title": "Email" }
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/Message" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/api/reset-password/": {
			"post": {
				"tags": ["login"],
				"summary": "Reset Password",
				"description": "Reset password",
				"operationId": "login-reset_password",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/NewPassword" }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/Message" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/api/password-recovery-html-content/{email}": {
			"post": {
				"tags": ["login"],
				"summary": "Recover Password Html Content",
				"description": "HTML Content for Password Recovery",
				"operationId": "login-recover_password_html_content",
				"security": [{ "OAuth2PasswordBearer": [] }],
				"parameters": [
					{
						"name": "email",
						"in": "path",
						"required": true,
						"schema": { "type": "string", "title": "Email" }
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": { "text/html": { "schema": { "type": "string" } } }
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/api/users/": {
			"get": {
				"tags": ["users"],
				"summary": "Read",
				"description": "Read users.",
				"operationId": "users-read",
				"security": [{ "OAuth2PasswordBearer": [] }],
				"parameters": [
					{
						"name": "q",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [{ "type": "string" }, { "type": "null" }],
							"title": "Q"
						}
					},
					{
						"name": "limit",
						"in": "query",
						"required": false,
						"schema": {
							"type": "integer",
							"maximum": 100,
							"exclusiveMinimum": 0,
							"default": 10,
							"title": "Limit"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"required": false,
						"schema": {
							"type": "integer",
							"minimum": 0,
							"default": 0,
							"title": "Offset"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PagedResponse_UserPublic_"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			},
			"post": {
				"tags": ["users"],
				"summary": "Create",
				"description": "Create new user.",
				"operationId": "users-create",
				"security": [{ "OAuth2PasswordBearer": [] }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/UserCreate" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserPublic" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/api/users/me": {
			"get": {
				"tags": ["users"],
				"summary": "Read User Me",
				"description": "Get current user.",
				"operationId": "users-read_user_me",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserPublic" }
							}
						}
					}
				},
				"security": [{ "OAuth2PasswordBearer": [] }]
			}
		},
		"/api/users/signup": {
			"post": {
				"tags": ["users"],
				"summary": "Register",
				"description": "Create new user without the need to be logged in.",
				"operationId": "users-register",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/UserRegister" }
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserPublic" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/api/users/{user_id}": {
			"get": {
				"tags": ["users"],
				"summary": "Read By Id",
				"description": "Get a specific user by id.",
				"operationId": "users-read_by_id",
				"security": [{ "OAuth2PasswordBearer": [] }],
				"parameters": [
					{
						"name": "user_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string", "format": "uuid", "title": "User Id" }
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserPublic" }
							}
						}
					},
					"401": {
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						},
						"description": "Unauthorized"
					},
					"403": {
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						},
						"description": "Forbidden"
					},
					"404": {
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						},
						"description": "Not Found"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			},
			"patch": {
				"tags": ["users"],
				"summary": "Update",
				"description": "Update a user.",
				"operationId": "users-update",
				"security": [{ "OAuth2PasswordBearer": [] }],
				"parameters": [
					{
						"name": "user_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string", "format": "uuid", "title": "User Id" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/UserUpdate" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserPublic" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			},
			"delete": {
				"tags": ["users"],
				"summary": "Delete",
				"description": "Delete a user.",
				"operationId": "users-delete",
				"security": [{ "OAuth2PasswordBearer": [] }],
				"parameters": [
					{
						"name": "user_id",
						"in": "path",
						"required": true,
						"schema": { "type": "string", "format": "uuid", "title": "User Id" }
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/Message" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/api/utils/test-email/": {
			"post": {
				"tags": ["utils"],
				"summary": "Test Email",
				"description": "Test emails.",
				"operationId": "utils-test_email",
				"security": [{ "OAuth2PasswordBearer": [] }],
				"parameters": [
					{
						"name": "email_to",
						"in": "query",
						"required": true,
						"schema": {
							"type": "string",
							"format": "email",
							"title": "Email To"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/Message" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/api/utils/health-check/": {
			"get": {
				"tags": ["utils"],
				"summary": "Health Check",
				"operationId": "utils-health_check",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean",
									"title": "Response Utils-Health Check"
								}
							}
						}
					}
				}
			}
		},
		"/api/activities/{path}": {
			"get": {
				"tags": ["activities"],
				"summary": "Get Activities By Path",
				"description": "Read activities from a path.",
				"operationId": "activities-get_activities_by_path",
				"parameters": [
					{
						"name": "path",
						"in": "path",
						"required": true,
						"schema": { "type": "string", "title": "Path" }
					},
					{
						"name": "descendant",
						"in": "query",
						"required": false,
						"schema": {
							"type": "boolean",
							"default": false,
							"title": "Descendant"
						}
					},
					{
						"name": "q",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [{ "type": "string" }, { "type": "null" }],
							"title": "Q"
						}
					},
					{
						"name": "limit",
						"in": "query",
						"required": false,
						"schema": {
							"type": "integer",
							"maximum": 100,
							"exclusiveMinimum": 0,
							"default": 10,
							"title": "Limit"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"required": false,
						"schema": {
							"type": "integer",
							"minimum": 0,
							"default": 0,
							"title": "Offset"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/PagedResponse_TreePublic_"
										},
										{ "$ref": "#/components/schemas/TreePublic" }
									],
									"title": "Response Activities-Get Activities By Path"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/api/activities/": {
			"get": {
				"tags": ["activities"],
				"summary": "Get Activities",
				"description": "Read all activities.",
				"operationId": "activities-get_activities",
				"parameters": [
					{
						"name": "q",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [{ "type": "string" }, { "type": "null" }],
							"title": "Q"
						}
					},
					{
						"name": "limit",
						"in": "query",
						"required": false,
						"schema": {
							"type": "integer",
							"maximum": 100,
							"exclusiveMinimum": 0,
							"default": 10,
							"title": "Limit"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"required": false,
						"schema": {
							"type": "integer",
							"minimum": 0,
							"default": 0,
							"title": "Offset"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PagedResponse_TreePublic_"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"ActorAssocPublic": {
				"properties": {
					"actor": {
						"oneOf": [
							{ "$ref": "#/components/schemas/OrgPublic" },
							{ "$ref": "#/components/schemas/PersonPublic" }
						],
						"title": "Actor",
						"discriminator": {
							"propertyName": "type",
							"mapping": {
								"Org": "#/components/schemas/OrgPublic",
								"Person": "#/components/schemas/PersonPublic"
							}
						}
					},
					"data": {
						"anyOf": [{ "type": "object" }, { "type": "null" }],
						"title": "Data"
					}
				},
				"type": "object",
				"required": ["actor"],
				"title": "ActorAssocPublic"
			},
			"AddressPublic": {
				"properties": {
					"q": { "type": "string", "title": "Q" },
					"geom_point": {
						"anyOf": [
							{ "$ref": "#/components/schemas/Point" },
							{ "type": "null" }
						]
					}
				},
				"type": "object",
				"required": ["q"],
				"title": "AddressPublic"
			},
			"BaseModel": { "properties": {}, "type": "object", "title": "BaseModel" },
			"Body_login-access_token": {
				"properties": {
					"grant_type": {
						"anyOf": [
							{ "type": "string", "pattern": "password" },
							{ "type": "null" }
						],
						"title": "Grant Type"
					},
					"username": { "type": "string", "title": "Username" },
					"password": { "type": "string", "title": "Password" },
					"scope": { "type": "string", "title": "Scope", "default": "" },
					"client_id": {
						"anyOf": [{ "type": "string" }, { "type": "null" }],
						"title": "Client Id"
					},
					"client_secret": {
						"anyOf": [{ "type": "string" }, { "type": "null" }],
						"title": "Client Secret"
					}
				},
				"type": "object",
				"required": ["username", "password"],
				"title": "Body_login-access_token"
			},
			"ContactPublic": {
				"properties": {
					"email_address": {
						"anyOf": [{ "type": "string" }, { "type": "null" }],
						"title": "Email Address"
					},
					"phone_number": {
						"anyOf": [{ "type": "string" }, { "type": "null" }],
						"title": "Phone Number"
					},
					"address": {
						"anyOf": [
							{ "$ref": "#/components/schemas/AddressPublic" },
							{ "type": "null" }
						]
					},
					"website": {
						"anyOf": [{ "type": "string" }, { "type": "null" }],
						"title": "Website"
					}
				},
				"type": "object",
				"title": "ContactPublic"
			},
			"ErrorResponse": {
				"properties": { "detail": { "type": "string", "title": "Detail" } },
				"type": "object",
				"required": ["detail"],
				"title": "ErrorResponse"
			},
			"EventPublic": {
				"properties": {
					"owner_id": {
						"anyOf": [
							{ "type": "string", "format": "uuid" },
							{ "type": "null" }
						],
						"title": "Owner Id"
					},
					"owner": {
						"anyOf": [
							{ "$ref": "#/components/schemas/OwnerPublic" },
							{ "type": "null" }
						]
					},
					"group_owner_id": {
						"anyOf": [
							{ "type": "string", "format": "uuid" },
							{ "type": "null" }
						],
						"title": "Group Owner Id"
					},
					"group_owner": {
						"anyOf": [
							{ "$ref": "#/components/schemas/GroupOwnerPublic" },
							{ "type": "null" }
						]
					},
					"other_read": { "type": "boolean", "title": "Other Read" },
					"member_read": { "type": "boolean", "title": "Member Read" },
					"group_read": { "type": "boolean", "title": "Group Read" },
					"description": {
						"anyOf": [{ "type": "string" }, { "type": "null" }],
						"title": "Description"
					},
					"start_dt": {
						"type": "string",
						"format": "date-time",
						"title": "Start Dt"
					},
					"end_dt": {
						"anyOf": [
							{ "type": "string", "format": "date-time" },
							{ "type": "null" }
						],
						"title": "End Dt"
					},
					"actor_assocs": {
						"items": { "$ref": "#/components/schemas/ActorAssocPublic" },
						"type": "array",
						"title": "Actor Assocs",
						"default": []
					}
				},
				"type": "object",
				"required": ["other_read", "member_read", "group_read", "start_dt"],
				"title": "EventPublic",
				"description": "Used for the /tours/{id} endpoint"
			},
			"Feature": {
				"properties": {
					"bbox": {
						"anyOf": [
							{
								"prefixItems": [
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" }
								],
								"type": "array",
								"maxItems": 4,
								"minItems": 4
							},
							{
								"prefixItems": [
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" }
								],
								"type": "array",
								"maxItems": 6,
								"minItems": 6
							},
							{ "type": "null" }
						],
						"title": "Bbox"
					},
					"type": {
						"type": "string",
						"enum": ["Feature"],
						"const": "Feature",
						"title": "Type"
					},
					"geometry": {
						"anyOf": [
							{
								"oneOf": [
									{ "$ref": "#/components/schemas/Point" },
									{ "$ref": "#/components/schemas/MultiPoint" },
									{ "$ref": "#/components/schemas/LineString" },
									{ "$ref": "#/components/schemas/MultiLineString" },
									{ "$ref": "#/components/schemas/Polygon" },
									{ "$ref": "#/components/schemas/MultiPolygon" },
									{ "$ref": "#/components/schemas/GeometryCollection" }
								],
								"discriminator": {
									"propertyName": "type",
									"mapping": {
										"GeometryCollection": "#/components/schemas/GeometryCollection",
										"LineString": "#/components/schemas/LineString",
										"MultiLineString": "#/components/schemas/MultiLineString",
										"MultiPoint": "#/components/schemas/MultiPoint",
										"MultiPolygon": "#/components/schemas/MultiPolygon",
										"Point": "#/components/schemas/Point",
										"Polygon": "#/components/schemas/Polygon"
									}
								}
							},
							{ "type": "null" }
						],
						"title": "Geometry"
					},
					"properties": {
						"anyOf": [
							{ "type": "object" },
							{ "$ref": "#/components/schemas/BaseModel" },
							{ "type": "null" }
						],
						"title": "Properties"
					},
					"id": {
						"anyOf": [
							{ "type": "integer" },
							{ "type": "string" },
							{ "type": "null" }
						],
						"title": "Id"
					}
				},
				"type": "object",
				"required": ["type", "geometry", "properties"],
				"title": "Feature",
				"description": "Feature Model"
			},
			"FeatureCollection": {
				"properties": {
					"bbox": {
						"anyOf": [
							{
								"prefixItems": [
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" }
								],
								"type": "array",
								"maxItems": 4,
								"minItems": 4
							},
							{
								"prefixItems": [
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" }
								],
								"type": "array",
								"maxItems": 6,
								"minItems": 6
							},
							{ "type": "null" }
						],
						"title": "Bbox"
					},
					"type": {
						"type": "string",
						"enum": ["FeatureCollection"],
						"const": "FeatureCollection",
						"title": "Type"
					},
					"features": {
						"items": { "$ref": "#/components/schemas/Feature" },
						"type": "array",
						"title": "Features"
					}
				},
				"type": "object",
				"required": ["type", "features"],
				"title": "FeatureCollection",
				"description": "FeatureCollection Model"
			},
			"GeometryCollection": {
				"properties": {
					"bbox": {
						"anyOf": [
							{
								"prefixItems": [
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" }
								],
								"type": "array",
								"maxItems": 4,
								"minItems": 4
							},
							{
								"prefixItems": [
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" }
								],
								"type": "array",
								"maxItems": 6,
								"minItems": 6
							},
							{ "type": "null" }
						],
						"title": "Bbox"
					},
					"type": {
						"type": "string",
						"enum": ["GeometryCollection"],
						"const": "GeometryCollection",
						"title": "Type"
					},
					"geometries": {
						"items": {
							"oneOf": [
								{ "$ref": "#/components/schemas/Point" },
								{ "$ref": "#/components/schemas/MultiPoint" },
								{ "$ref": "#/components/schemas/LineString" },
								{ "$ref": "#/components/schemas/MultiLineString" },
								{ "$ref": "#/components/schemas/Polygon" },
								{ "$ref": "#/components/schemas/MultiPolygon" },
								{ "$ref": "#/components/schemas/GeometryCollection" }
							],
							"discriminator": {
								"propertyName": "type",
								"mapping": {
									"GeometryCollection": "#/components/schemas/GeometryCollection",
									"LineString": "#/components/schemas/LineString",
									"MultiLineString": "#/components/schemas/MultiLineString",
									"MultiPoint": "#/components/schemas/MultiPoint",
									"MultiPolygon": "#/components/schemas/MultiPolygon",
									"Point": "#/components/schemas/Point",
									"Polygon": "#/components/schemas/Polygon"
								}
							}
						},
						"type": "array",
						"title": "Geometries"
					}
				},
				"type": "object",
				"required": ["type", "geometries"],
				"title": "GeometryCollection",
				"description": "GeometryCollection Model"
			},
			"GroupOwnerPublic": {
				"properties": {
					"id": { "type": "string", "format": "uuid", "title": "Id" },
					"name": { "type": "string", "title": "Name" }
				},
				"type": "object",
				"required": ["id", "name"],
				"title": "GroupOwnerPublic"
			},
			"HTTPValidationError": {
				"properties": {
					"detail": {
						"items": { "$ref": "#/components/schemas/ValidationError" },
						"type": "array",
						"title": "Detail"
					}
				},
				"type": "object",
				"title": "HTTPValidationError"
			},
			"LineString": {
				"properties": {
					"bbox": {
						"anyOf": [
							{
								"prefixItems": [
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" }
								],
								"type": "array",
								"maxItems": 4,
								"minItems": 4
							},
							{
								"prefixItems": [
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" }
								],
								"type": "array",
								"maxItems": 6,
								"minItems": 6
							},
							{ "type": "null" }
						],
						"title": "Bbox"
					},
					"type": {
						"type": "string",
						"enum": ["LineString"],
						"const": "LineString",
						"title": "Type"
					},
					"coordinates": {
						"items": {
							"anyOf": [
								{ "$ref": "#/components/schemas/Position2D" },
								{ "$ref": "#/components/schemas/Position3D" }
							]
						},
						"type": "array",
						"minItems": 2,
						"title": "Coordinates"
					}
				},
				"type": "object",
				"required": ["type", "coordinates"],
				"title": "LineString",
				"description": "LineString Model"
			},
			"Message": {
				"properties": { "message": { "type": "string", "title": "Message" } },
				"type": "object",
				"required": ["message"],
				"title": "Message"
			},
			"MultiLineString": {
				"properties": {
					"bbox": {
						"anyOf": [
							{
								"prefixItems": [
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" }
								],
								"type": "array",
								"maxItems": 4,
								"minItems": 4
							},
							{
								"prefixItems": [
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" }
								],
								"type": "array",
								"maxItems": 6,
								"minItems": 6
							},
							{ "type": "null" }
						],
						"title": "Bbox"
					},
					"type": {
						"type": "string",
						"enum": ["MultiLineString"],
						"const": "MultiLineString",
						"title": "Type"
					},
					"coordinates": {
						"items": {
							"items": {
								"anyOf": [
									{ "$ref": "#/components/schemas/Position2D" },
									{ "$ref": "#/components/schemas/Position3D" }
								]
							},
							"type": "array",
							"minItems": 2
						},
						"type": "array",
						"title": "Coordinates"
					}
				},
				"type": "object",
				"required": ["type", "coordinates"],
				"title": "MultiLineString",
				"description": "MultiLineString Model"
			},
			"MultiPoint": {
				"properties": {
					"bbox": {
						"anyOf": [
							{
								"prefixItems": [
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" }
								],
								"type": "array",
								"maxItems": 4,
								"minItems": 4
							},
							{
								"prefixItems": [
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" }
								],
								"type": "array",
								"maxItems": 6,
								"minItems": 6
							},
							{ "type": "null" }
						],
						"title": "Bbox"
					},
					"type": {
						"type": "string",
						"enum": ["MultiPoint"],
						"const": "MultiPoint",
						"title": "Type"
					},
					"coordinates": {
						"items": {
							"anyOf": [
								{ "$ref": "#/components/schemas/Position2D" },
								{ "$ref": "#/components/schemas/Position3D" }
							]
						},
						"type": "array",
						"title": "Coordinates"
					}
				},
				"type": "object",
				"required": ["type", "coordinates"],
				"title": "MultiPoint",
				"description": "MultiPoint Model"
			},
			"MultiPolygon": {
				"properties": {
					"bbox": {
						"anyOf": [
							{
								"prefixItems": [
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" }
								],
								"type": "array",
								"maxItems": 4,
								"minItems": 4
							},
							{
								"prefixItems": [
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" }
								],
								"type": "array",
								"maxItems": 6,
								"minItems": 6
							},
							{ "type": "null" }
						],
						"title": "Bbox"
					},
					"type": {
						"type": "string",
						"enum": ["MultiPolygon"],
						"const": "MultiPolygon",
						"title": "Type"
					},
					"coordinates": {
						"items": {
							"items": {
								"items": {
									"anyOf": [
										{ "$ref": "#/components/schemas/Position2D" },
										{ "$ref": "#/components/schemas/Position3D" }
									]
								},
								"type": "array",
								"minItems": 4
							},
							"type": "array"
						},
						"type": "array",
						"title": "Coordinates"
					}
				},
				"type": "object",
				"required": ["type", "coordinates"],
				"title": "MultiPolygon",
				"description": "MultiPolygon Model"
			},
			"NewPassword": {
				"properties": {
					"token": { "type": "string", "title": "Token" },
					"new_password": {
						"type": "string",
						"maxLength": 40,
						"minLength": 8,
						"title": "New Password"
					}
				},
				"type": "object",
				"required": ["token", "new_password"],
				"title": "NewPassword"
			},
			"OrgAssocPublic": {
				"properties": {
					"org": { "$ref": "#/components/schemas/OrgPublic" },
					"data": {
						"anyOf": [{ "type": "object" }, { "type": "null" }],
						"title": "Data"
					}
				},
				"type": "object",
				"required": ["org"],
				"title": "OrgAssocPublic"
			},
			"OrgPublic": {
				"properties": {
					"owner_id": {
						"anyOf": [
							{ "type": "string", "format": "uuid" },
							{ "type": "null" }
						],
						"title": "Owner Id"
					},
					"owner": {
						"anyOf": [
							{ "$ref": "#/components/schemas/OwnerPublic" },
							{ "type": "null" }
						]
					},
					"group_owner_id": {
						"anyOf": [
							{ "type": "string", "format": "uuid" },
							{ "type": "null" }
						],
						"title": "Group Owner Id"
					},
					"group_owner": {
						"anyOf": [
							{ "$ref": "#/components/schemas/GroupOwnerPublic" },
							{ "type": "null" }
						]
					},
					"other_read": { "type": "boolean", "title": "Other Read" },
					"member_read": { "type": "boolean", "title": "Member Read" },
					"group_read": { "type": "boolean", "title": "Group Read" },
					"id": { "type": "string", "format": "uuid", "title": "Id" },
					"name": { "type": "string", "title": "Name" },
					"contact": {
						"anyOf": [
							{ "$ref": "#/components/schemas/ContactPublic" },
							{ "type": "null" }
						]
					},
					"membership_assocs": {
						"items": { "$ref": "#/components/schemas/OrgAssocPublic" },
						"type": "array",
						"title": "Membership Assocs"
					},
					"tour_assocs": {
						"items": { "$ref": "#/components/schemas/TourAssocPublic" },
						"type": "array",
						"title": "Tour Assocs"
					},
					"type": {
						"type": "string",
						"enum": ["Org"],
						"const": "Org",
						"title": "Type"
					},
					"description": {
						"anyOf": [{ "type": "string" }, { "type": "null" }],
						"title": "Description"
					},
					"activities": {
						"items": { "$ref": "#/components/schemas/TreePublic" },
						"type": "array",
						"title": "Activities"
					},
					"member_assocs": {
						"items": { "$ref": "#/components/schemas/ActorAssocPublic" },
						"type": "array",
						"title": "Member Assocs"
					}
				},
				"type": "object",
				"required": [
					"other_read",
					"member_read",
					"group_read",
					"id",
					"name",
					"membership_assocs",
					"tour_assocs",
					"type",
					"activities",
					"member_assocs"
				],
				"title": "OrgPublic"
			},
			"OwnerPersonPublic": {
				"properties": {
					"id": { "type": "string", "format": "uuid", "title": "Id" },
					"name": { "type": "string", "title": "Name" }
				},
				"type": "object",
				"required": ["id", "name"],
				"title": "OwnerPersonPublic"
			},
			"OwnerPublic": {
				"properties": {
					"id": { "type": "string", "format": "uuid", "title": "Id" },
					"email": { "type": "string", "title": "Email" },
					"person": {
						"anyOf": [
							{ "$ref": "#/components/schemas/OwnerPersonPublic" },
							{ "type": "null" }
						]
					}
				},
				"type": "object",
				"required": ["id", "email"],
				"title": "OwnerPublic"
			},
			"PagedResponse_TourPublic_": {
				"properties": {
					"total": { "type": "integer", "title": "Total" },
					"limit": { "type": "integer", "title": "Limit" },
					"offset": { "type": "integer", "title": "Offset" },
					"results": {
						"items": { "$ref": "#/components/schemas/TourPublic" },
						"type": "array",
						"title": "Results"
					}
				},
				"type": "object",
				"required": ["total", "limit", "offset", "results"],
				"title": "PagedResponse[TourPublic]"
			},
			"PagedResponse_TreePublic_": {
				"properties": {
					"total": { "type": "integer", "title": "Total" },
					"limit": { "type": "integer", "title": "Limit" },
					"offset": { "type": "integer", "title": "Offset" },
					"results": {
						"items": { "$ref": "#/components/schemas/TreePublic" },
						"type": "array",
						"title": "Results"
					}
				},
				"type": "object",
				"required": ["total", "limit", "offset", "results"],
				"title": "PagedResponse[TreePublic]"
			},
			"PagedResponse_Union_OrgPublic__PersonPublic__": {
				"properties": {
					"total": { "type": "integer", "title": "Total" },
					"limit": { "type": "integer", "title": "Limit" },
					"offset": { "type": "integer", "title": "Offset" },
					"results": {
						"items": {
							"anyOf": [
								{ "$ref": "#/components/schemas/OrgPublic" },
								{ "$ref": "#/components/schemas/PersonPublic" }
							]
						},
						"type": "array",
						"title": "Results"
					}
				},
				"type": "object",
				"required": ["total", "limit", "offset", "results"],
				"title": "PagedResponse[Union[OrgPublic, PersonPublic]]"
			},
			"PagedResponse_UserPublic_": {
				"properties": {
					"total": { "type": "integer", "title": "Total" },
					"limit": { "type": "integer", "title": "Limit" },
					"offset": { "type": "integer", "title": "Offset" },
					"results": {
						"items": { "$ref": "#/components/schemas/UserPublic" },
						"type": "array",
						"title": "Results"
					}
				},
				"type": "object",
				"required": ["total", "limit", "offset", "results"],
				"title": "PagedResponse[UserPublic]"
			},
			"PersonPublic": {
				"properties": {
					"owner_id": {
						"anyOf": [
							{ "type": "string", "format": "uuid" },
							{ "type": "null" }
						],
						"title": "Owner Id"
					},
					"owner": {
						"anyOf": [
							{ "$ref": "#/components/schemas/OwnerPublic" },
							{ "type": "null" }
						]
					},
					"group_owner_id": {
						"anyOf": [
							{ "type": "string", "format": "uuid" },
							{ "type": "null" }
						],
						"title": "Group Owner Id"
					},
					"group_owner": {
						"anyOf": [
							{ "$ref": "#/components/schemas/GroupOwnerPublic" },
							{ "type": "null" }
						]
					},
					"other_read": { "type": "boolean", "title": "Other Read" },
					"member_read": { "type": "boolean", "title": "Member Read" },
					"group_read": { "type": "boolean", "title": "Group Read" },
					"id": { "type": "string", "format": "uuid", "title": "Id" },
					"name": { "type": "string", "title": "Name" },
					"contact": {
						"anyOf": [
							{ "$ref": "#/components/schemas/ContactPublic" },
							{ "type": "null" }
						]
					},
					"membership_assocs": {
						"items": { "$ref": "#/components/schemas/OrgAssocPublic" },
						"type": "array",
						"title": "Membership Assocs"
					},
					"tour_assocs": {
						"items": { "$ref": "#/components/schemas/TourAssocPublic" },
						"type": "array",
						"title": "Tour Assocs"
					},
					"type": {
						"type": "string",
						"enum": ["Person"],
						"const": "Person",
						"title": "Type"
					},
					"role": {
						"anyOf": [{ "type": "string" }, { "type": "null" }],
						"title": "Role"
					}
				},
				"type": "object",
				"required": [
					"other_read",
					"member_read",
					"group_read",
					"id",
					"name",
					"membership_assocs",
					"tour_assocs",
					"type"
				],
				"title": "PersonPublic"
			},
			"Point": {
				"properties": {
					"bbox": {
						"anyOf": [
							{
								"prefixItems": [
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" }
								],
								"type": "array",
								"maxItems": 4,
								"minItems": 4
							},
							{
								"prefixItems": [
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" }
								],
								"type": "array",
								"maxItems": 6,
								"minItems": 6
							},
							{ "type": "null" }
						],
						"title": "Bbox"
					},
					"type": {
						"type": "string",
						"enum": ["Point"],
						"const": "Point",
						"title": "Type"
					},
					"coordinates": {
						"anyOf": [
							{ "$ref": "#/components/schemas/Position2D" },
							{ "$ref": "#/components/schemas/Position3D" }
						],
						"title": "Coordinates"
					}
				},
				"type": "object",
				"required": ["type", "coordinates"],
				"title": "Point",
				"description": "Point Model"
			},
			"Polygon": {
				"properties": {
					"bbox": {
						"anyOf": [
							{
								"prefixItems": [
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" }
								],
								"type": "array",
								"maxItems": 4,
								"minItems": 4
							},
							{
								"prefixItems": [
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" },
									{ "type": "number" }
								],
								"type": "array",
								"maxItems": 6,
								"minItems": 6
							},
							{ "type": "null" }
						],
						"title": "Bbox"
					},
					"type": {
						"type": "string",
						"enum": ["Polygon"],
						"const": "Polygon",
						"title": "Type"
					},
					"coordinates": {
						"items": {
							"items": {
								"anyOf": [
									{ "$ref": "#/components/schemas/Position2D" },
									{ "$ref": "#/components/schemas/Position3D" }
								]
							},
							"type": "array",
							"minItems": 4
						},
						"type": "array",
						"title": "Coordinates"
					}
				},
				"type": "object",
				"required": ["type", "coordinates"],
				"title": "Polygon",
				"description": "Polygon Model"
			},
			"Position2D": {
				"prefixItems": [
					{ "type": "number", "title": "Longitude" },
					{ "type": "number", "title": "Latitude" }
				],
				"type": "array",
				"maxItems": 2,
				"minItems": 2
			},
			"Position3D": {
				"prefixItems": [
					{ "type": "number", "title": "Longitude" },
					{ "type": "number", "title": "Latitude" },
					{ "type": "number", "title": "Altitude" }
				],
				"type": "array",
				"maxItems": 3,
				"minItems": 3
			},
			"Token": {
				"properties": {
					"access_token": { "type": "string", "title": "Access Token" },
					"token_type": {
						"type": "string",
						"title": "Token Type",
						"default": "bearer"
					}
				},
				"type": "object",
				"required": ["access_token"],
				"title": "Token"
			},
			"TourAssocPublic": {
				"properties": {
					"tour": { "$ref": "#/components/schemas/TourPublic" },
					"data": {
						"anyOf": [{ "type": "object" }, { "type": "null" }],
						"title": "Data"
					}
				},
				"type": "object",
				"required": ["tour"],
				"title": "TourAssocPublic"
			},
			"TourPublic": {
				"properties": {
					"owner_id": {
						"anyOf": [
							{ "type": "string", "format": "uuid" },
							{ "type": "null" }
						],
						"title": "Owner Id"
					},
					"owner": {
						"anyOf": [
							{ "$ref": "#/components/schemas/OwnerPublic" },
							{ "type": "null" }
						]
					},
					"group_owner_id": {
						"anyOf": [
							{ "type": "string", "format": "uuid" },
							{ "type": "null" }
						],
						"title": "Group Owner Id"
					},
					"group_owner": {
						"anyOf": [
							{ "$ref": "#/components/schemas/GroupOwnerPublic" },
							{ "type": "null" }
						]
					},
					"other_read": { "type": "boolean", "title": "Other Read" },
					"member_read": { "type": "boolean", "title": "Member Read" },
					"group_read": { "type": "boolean", "title": "Group Read" },
					"id": { "type": "string", "format": "uuid", "title": "Id" },
					"name": { "type": "string", "title": "Name" },
					"description": {
						"anyOf": [{ "type": "string" }, { "type": "null" }],
						"title": "Description"
					},
					"year": {
						"anyOf": [{ "type": "integer" }, { "type": "null" }],
						"title": "Year"
					},
					"disciplines": {
						"items": { "$ref": "#/components/schemas/TreePublic" },
						"type": "array",
						"title": "Disciplines"
					},
					"mobilities": {
						"items": { "$ref": "#/components/schemas/TreePublic" },
						"type": "array",
						"title": "Mobilities"
					},
					"actor_assocs": {
						"items": { "$ref": "#/components/schemas/ActorAssocPublic" },
						"type": "array",
						"title": "Actor Assocs",
						"default": []
					},
					"events": {
						"items": { "$ref": "#/components/schemas/EventPublic" },
						"type": "array",
						"title": "Events"
					},
					"geojson": {
						"anyOf": [
							{ "$ref": "#/components/schemas/FeatureCollection" },
							{ "type": "null" }
						]
					}
				},
				"type": "object",
				"required": [
					"other_read",
					"member_read",
					"group_read",
					"id",
					"name",
					"disciplines",
					"mobilities",
					"events"
				],
				"title": "TourPublic",
				"description": "Used for the /tours endpoint"
			},
			"TreePublic": {
				"properties": {
					"name": { "type": "string", "title": "Name" },
					"path": { "type": "string", "title": "Path" }
				},
				"type": "object",
				"required": ["name", "path"],
				"title": "TreePublic"
			},
			"UserCreate": {
				"properties": {
					"email": {
						"type": "string",
						"maxLength": 255,
						"format": "email",
						"title": "Email"
					},
					"is_active": {
						"type": "boolean",
						"title": "Is Active",
						"default": false
					},
					"is_superuser": {
						"type": "boolean",
						"title": "Is Superuser",
						"default": false
					},
					"is_member": {
						"type": "boolean",
						"title": "Is Member",
						"default": false
					},
					"password": {
						"type": "string",
						"maxLength": 40,
						"minLength": 8,
						"title": "Password"
					}
				},
				"type": "object",
				"required": ["email", "password"],
				"title": "UserCreate"
			},
			"UserPerson": {
				"properties": {
					"id": { "type": "string", "format": "uuid", "title": "Id" },
					"name": { "type": "string", "title": "Name" },
					"membership_assocs": {
						"items": { "$ref": "#/components/schemas/UserPersonOrgAssoc" },
						"type": "array",
						"title": "Membership Assocs"
					}
				},
				"type": "object",
				"required": ["id", "name", "membership_assocs"],
				"title": "UserPerson"
			},
			"UserPersonOrg": {
				"properties": {
					"id": { "type": "string", "format": "uuid", "title": "Id" },
					"name": { "type": "string", "title": "Name" }
				},
				"type": "object",
				"required": ["id", "name"],
				"title": "UserPersonOrg"
			},
			"UserPersonOrgAssoc": {
				"properties": {
					"data": { "type": "object", "title": "Data" },
					"org": { "$ref": "#/components/schemas/UserPersonOrg" }
				},
				"type": "object",
				"required": ["data", "org"],
				"title": "UserPersonOrgAssoc"
			},
			"UserPublic": {
				"properties": {
					"email": {
						"type": "string",
						"maxLength": 255,
						"format": "email",
						"title": "Email"
					},
					"is_active": { "type": "boolean", "title": "Is Active" },
					"is_superuser": { "type": "boolean", "title": "Is Superuser" },
					"is_member": { "type": "boolean", "title": "Is Member" },
					"id": { "type": "string", "format": "uuid", "title": "Id" },
					"person": {
						"anyOf": [
							{ "$ref": "#/components/schemas/UserPerson" },
							{ "type": "null" }
						]
					}
				},
				"type": "object",
				"required": ["email", "is_active", "is_superuser", "is_member", "id"],
				"title": "UserPublic"
			},
			"UserRegister": {
				"properties": {
					"email": {
						"type": "string",
						"maxLength": 255,
						"format": "email",
						"title": "Email"
					},
					"password": {
						"type": "string",
						"maxLength": 40,
						"minLength": 8,
						"title": "Password"
					}
				},
				"type": "object",
				"required": ["email", "password"],
				"title": "UserRegister"
			},
			"UserUpdate": {
				"properties": {
					"email": {
						"anyOf": [
							{ "type": "string", "maxLength": 255, "format": "email" },
							{ "type": "null" }
						],
						"title": "Email"
					},
					"is_active": {
						"type": "boolean",
						"title": "Is Active",
						"default": false
					},
					"is_superuser": {
						"type": "boolean",
						"title": "Is Superuser",
						"default": false
					},
					"is_member": {
						"type": "boolean",
						"title": "Is Member",
						"default": false
					},
					"password": {
						"anyOf": [
							{ "type": "string", "maxLength": 40, "minLength": 8 },
							{ "type": "null" }
						],
						"title": "Password"
					}
				},
				"type": "object",
				"title": "UserUpdate"
			},
			"ValidationError": {
				"properties": {
					"loc": {
						"items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
						"type": "array",
						"title": "Location"
					},
					"msg": { "type": "string", "title": "Message" },
					"type": { "type": "string", "title": "Error Type" }
				},
				"type": "object",
				"required": ["loc", "msg", "type"],
				"title": "ValidationError"
			}
		},
		"securitySchemes": {
			"OAuth2PasswordBearer": {
				"type": "oauth2",
				"flows": {
					"password": { "scopes": {}, "tokenUrl": "/api/login/access-token" }
				}
			}
		}
	}
}
